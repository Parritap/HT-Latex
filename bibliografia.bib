@inproceedings{9763171,
abstract = {Cloud Computing is an emerging technology that is used not only by developers but also by end-users. It has vital importance in the Information Technology (IT) industries as its future would create a great transition from conventional IT services. These days, containerization in cloud computing has become an important research area. The selection of container orchestration tools is one of the difficult tasks for the organizations involved in the management of the vast number of containers. These tools have their strengths, weaknesses, and functionalities which need to be considered. This paper presents a comparative analysis of the container orchestration tools. This analysis would help the professionals to decide whether they need an orchestrator bound to a single technology or an orchestrator which provides the independent solution. In this paper, four popular orchestration tools viz., Kubernetes, Docker Swarm, Mesos, and Redhat OpenShift are analyzed on various parameters viz., security, deployment, stability, scalability, cluster installation, and learning curve. We observed that Kubernetes has the best scheduling features whereas Docker Swarm is easy to use. We also found that Mesos has good scalability whereas OpenShift is a highly secure orchestration tool.},
author = {Malviya, Anshita and Dwivedi, Rajendra Kumar},
booktitle = {Proceedings of the 2022 9th International Conference on Computing for Sustainable Global Development, INDIACom 2022},
doi = {10.23919/INDIACom54597.2022.9763171},
isbn = {9789380544441},
keywords = {Apache Mesos,Cloud Computing,Container,Container Orchestration,Docker Swarm,Kubernetes,OpenShift},
month = {mar},
pages = {698--703},
title = {{A Comparative Analysis of Container Orchestration Tools in Cloud Computing}},
year = {2022}
}
@article{10.1145/3645092,
abstract = {Nowadays, cloud computing is gaining tremendous attention to deliver information via the internet. Virtualization plays a major role in cloud computing as it deploys multiple virtual machines on the same physical machine and thus results in improving resource utilization. Hypervisor-based virtualization and containerization are two commonly used approaches in operating system virtualization. In this article, we provide a systematic literature review on various phases in maintenance of containers including container image detection, container scheduling, container security measures, and performance evaluation of containers. We have selected 145 primary studies out of which 24% of studies are related to container performance evaluation, 42% of studies are related to container scheduling techniques, 22% of studies are related to container security measures, and 12% of studies are related to container image detection process. A few studies are related to container image detection process and evaluation of container security measures. Resource utilization is the most considered performance objective in almost all container scheduling techniques. We conclude that there is a need to introduce new tagging approaches, smell detection approaches, and also new approaches to detect and resolve threat issues in containers so that we can maintain the security of containers.},
address = {New York, NY, USA},
author = {Malhotra, Ruchika and Bansal, Anjali and Kessentini, Marouane},
doi = {10.1145/3645092},
issn = {15577341},
journal = {ACM Computing Surveys},
keywords = {Additional Key Words and PhrasesContainers,Docker,kubernetes,orchestration,performance evaluation,scheduling techniques,vulnerability},
month = {apr},
number = {8},
publisher = {Association for Computing Machinery},
title = {{A Systematic Literature Review on Maintenance of Software Containers}},
url = {https://doi.org/10.1145/3645092},
volume = {56},
year = {2024}
}
@inproceedings{10094059,
abstract = {In this study we explore and systematically review the latest research on container orchestration architectures, models and methods and their application in cloud environments. The aim of our systematic mapping study is to identify, classify the existing research papers and thus give organized knowledge of this evolving area. We tried to establish a systematic methodology that ensures the validity of our secondary study and construct a classification scheme that helps derive useful information from the existing body of research. We've gained insights about specific technology related issues like container orchestrators and container runtimes but also knowledge about more generalizable aspects like research strategies and approaches used in the primary studies. The results gave us insights about the current state and maturity of the research area and helped us identify research gaps. We were able to formulate recommendations for future research.},
author = {Naydenov, Nikolas and Ruseva, Stela},
booktitle = {2023 22nd International Symposium INFOTEH-JAHORINA, INFOTEH 2023},
doi = {10.1109/INFOTEH57020.2023.10094059},
isbn = {9781665475464},
issn = {2767-9470},
keywords = {Container orchestration,Containerd,Docker,Kubernetes,cloud computing,container orchestrator,container runtime,edge computing,methodology,research strategy,security,systematic review},
month = {mar},
pages = {1--8},
title = {{Cloud Container Orchestration Architectures, Models and Methods: a Systematic Mapping Study}},
year = {2023}
}
@book{Alonso2023,
abstract = {The evolution of Cloud Computing into a service utility, along with the pervasive adoption of the IoT paradigm, has promoted a significant growth in the need of computational and storage services. The traditional use of cloud services, focused on the consumption of one provider, is not valid anymore due to different shortcomings being the risk of vendor lock-in a critical. We are assisting to a change of paradigm, from the usage of a single cloud provider to the combination of multiple cloud service types, affecting the way in which applications are designed, developed, deployed and operated over such heterogeneous ecosystems. The result is an effective heterogeneity of architectures, methods, tools, and frameworks, copying with the multi-cloud application concept. The goal of this study is manifold. Firstly, it aims to characterize the multi-cloud concept from the application development perspective by reviewing existing definitions of multi-cloud native applications in the literature. Secondly, we set up the basis for the architectural characterization of these kind of applications. Finally, we highlight several open research issues drawn up from the analysis carried out. To achieve that, we have conducted a systematic literature review (SLR), where, a large set of primary studies published between 2011 and 2021 have been studied and classified. The in-depth analysis has revealed five main research trends for the improvement of the development and operation DevOps lifecycle of “multi-cloud native applications”. The paper finishes with directions for future work and research challenges to be addressed by the software community.},
author = {Alonso, Juncal and Orue-Echevarria, Leire and Casola, Valentina and Torre, Ana Isabel and Huarte, Maider and Osaba, Eneko and Lobo, Jesus L.},
booktitle = {Journal of Cloud Computing},
doi = {10.1186/s13677-022-00367-6},
file = {:Users/aariaz/Downloads/s13677-022-00367-6.pdf:pdf},
isbn = {1367702200367},
issn = {2192113X},
keywords = {Hybrid cloud,Multi-cloud native application,Software architecture,Software design,Systematic literature review},
publisher = {Springer Berlin Heidelberg},
title = {{Understanding the challenges and novel architectural models of multi-cloud native applications – a systematic literature review}},
url = {https://doi.org/10.1186/s13677-022-00367-6},
year = {2023}
}
@article{Alamoush2024,
abstract = {Container-based virtualization is a popular technique, e.g., to realize microservice architectures. Recently, containers became popular in Industry 4.0 / IIoT systems, which typically consist of hundreds of (edge) devices and machines. In such setups, efficient management of containers is essential as offered by container orchestrators like Kubernetes. However, currently no specific overviews discussing orchestrator capabilities for Industry 4.0 are available. In this paper, we analyze nine open source container orchestrators for their application in Industry 4.0 or IIoT settings as a basis for future research and development. We contribute a systematic literature review to identify 23 basic orchestration requirements. We complement this by insights from an intensive requirements collection in a research project on intelligent industrial production, as well as selected features from a published generic orchestrator analysis. From these 66 requirements, we derive a requirements/feature taxonomy, which we use to analyze the nine open source orchestrators including Kubernetes. We show that there is, e.g., still a lack of support regarding edge devices, IIoT protocols, security mechanisms, and specialized resources for artificial intelligence.},
author = {Alamoush, Ahmad and Eichelberger, Holger},
doi = {10.1007/s10009-024-00767-w},
issn = {14332787},
journal = {International Journal on Software Tools for Technology Transfer},
keywords = {Container orchestrators,Feature analysis,Industry 4.0/IIoT,Kubernetes,Requirements taxonomy,Systematic review},
number = {5},
pages = {527--550},
title = {{Open source container orchestration for Industry 4.0 – requirements and systematic feature analysis}},
url = {https://doi.org/10.1007/s10009-024-00767-w},
volume = {26},
year = {2024}
}
@article{SepulvedaRodriguez2022,
abstract = {At present, there is a proliferation of virtualization technologies (VTs), which are part of the basic and underlying infrastructure of popular cloud computing. Those interested in VTs are faced with a non-unified volume of information and various approaches to modes of operation, classification structures, and the performance implications of these technologies. This makes it difficult to decide which type of VT is appropriate for a particular context. Therefore, this paper reviews the state of the art on VT taxonomic models. Methodologically, a literature review is carried out to identify VT classification models, recognizing their features and weaknesses. With this in mind, a new taxonomy of virtualization technologies is proposed, which responds to the weaknesses identified in the analyzed schemes. The new VT taxonomy combines the Abstraction Level and Virtual Machine Type approaches, providing the reader with a means to visualize VTs. In doing so, the reader can locate the level of abstraction at which each VT is developed, in addition to the type of machine projected, whether it is a complete system or an execution environment for processes. The proposed taxonomy can be used in the academic environment to facilitate teaching processes or in the business environment to facilitate decision-making when implementing VTs.},
author = {Sep{\'{u}}lveda-Rodr{\'{i}}guez, Luis E. and Chavarro-Porras, Julio C. and Sanabria-Ordo{\~{n}}ez, John A. and Castro, Harold E. and Matthews, Jeanna},
doi = {10.15446/ing.investig.97363},
issn = {22488723},
journal = {Ingenieria e Investigacion},
keywords = {container,taxonomy,virtual machine,virtualization,virtualization technologies},
number = {3},
title = {{A Survey of Virtualization Technologies: Towards a New Taxonomic Proposal}},
url = {https://openurl-ebsco-com.crai.referencistas.com/contentitem/edsdia:edsdia.ART0001545825?sid=ebsco:plink:crawler&id=ebsco:edsdia:edsdia.ART0001545825&crl=c},
volume = {42},
year = {2022}
}
@article{Larrucea2018,
abstract = {Microservices are small applications with a single responsibility that can be deployed, scaled, and tested independently. They're gaining momentum across industries to facilitate agile delivery mechanisms for service-oriented architecture and to migrate function-oriented legacy architectures toward highly flexible service orientation. This article presents a brief overview of microservice technologies and how to migrate to them.},
author = {Larrucea, Xabier and Santamaria, Izaskun and Colomo-Palacios, Ricardo and Ebert, Christof},
doi = {10.1109/MS.2018.2141030},
issn = {07407459},
journal = {IEEE Software},
keywords = {CORS,Cross-Origin Resource Sharing,Software Technology,microservices,software development,software engineering},
number = {3},
pages = {96--100},
title = {{Microservices}},
volume = {35},
year = {2018}
}
@article{Kaur2021,
abstract = {Background: Software containers greatly facilitate the deployment and reproducibility of scientific data analyses in various platforms. However, container images often contain outdated or unnecessary software packages, which increases the number of security vulnerabilities in the images, widens the attack surface in the container host, and creates substantial security risks for computing infrastructures at large. This article presents a vulnerability analysis of container images for scientific data analysis. We compare results obtained with 4 vulnerability scanners, focusing on the use case of neuroscience data analysis, and quantifying the effect of image update and minification on the number of vulnerabilities. Results: We find that container images used for neuroscience data analysis contain hundreds of vulnerabilities, that software updates remove roughly two-thirds of these vulnerabilities, and that removing unused packages is also effective. Conclusions: We provide recommendations on how to build container images with fewer vulnerabilities.},
archivePrefix = {arXiv},
arxivId = {2010.13970},
author = {Kaur, Bhupinder and Dugr{\'{e}}, Mathieu and Hanna, Aiman and Glatard, Tristan},
doi = {10.1093/gigascience/giab025},
eprint = {2010.13970},
file = {:Users/aariaz/Downloads/giab025.pdf:pdf},
issn = {2047217X},
journal = {GigaScience},
keywords = {Docker,containers,neuroimaging,security vulnerabilities,singularity},
number = {6},
pages = {1--7},
pmid = {34080631},
title = {{An analysis of security vulnerabilities in container images for scientific data analysis}},
volume = {10},
year = {2021}
}
@article{Silva2018,
abstract = {Virtualization has enabled the commoditization of cloud computing, as the hardware resources have become available to run different environments and share computing resources amongst different enterprises. Two technology types are commonly used in virtualization of hardware, namely, hypervisor and container. The present paper concerns only container technologies.A comprehensive overview of the container technologies for virtualization and the dynamics of their popularity have not been available yet. Without such an overview, the informed fast choice of technologies is hindered. To fill this knowledge gap, a systemic literature review was conducted to reveal the most popular container technologies and the trends in their research.},
author = {da Silva, Vitor Goncalves and Kirikova, Marite and Alksnis, Gundars},
doi = {10.2478/acss-2018-0003},
file = {:Users/aariaz/Downloads/10.2478_acss-2018-0003.pdf:pdf},
journal = {Applied Computer Systems},
keywords = {6,Application virtualization, distributed computing,,application virtualization,distributed computing,distributed processing,docker is just one,in virtualization,it offers the,not come without the,of the,possible approaches for containers,side effects},
number = {1},
pages = {21--27},
title = {{Containers for Virtualization: An Overview}},
volume = {23},
year = {2018}
}
@article{Leite2019,
abstract = {DevOpsis a collaborative and multidisciplinary organizational effort to automate continuous delivery of new software updates while guaranteeing their correctness and reliability. The present survey investigates and discusses DevOps challenges from the perspective of engineers, managers, and researchers.We review the literature and develop a DevOps conceptual map, correlating the DevOps automation tools with these concepts. We then discuss their practical implications for engineers, managers, and researchers. Finally, we critically explore some of the most relevant DevOps challenges reported by the literature.},
archivePrefix = {arXiv},
arxivId = {1909.05409},
author = {Leite, Leonardo and Rocha, Carla and Kon, Fabio and Milojicic, Dejan and Meirelles, Paulo},
doi = {10.1145/3359981},
eprint = {1909.05409},
file = {:Users/aariaz/Downloads/1909.05409v4.pdf:pdf},
issn = {15577341},
journal = {ACM Computing Surveys},
keywords = {And build process,Configuration management,Continuous (delivery, deployment, integration),DevOps,Release process,Versioning},
number = {6},
title = {{A survey of DevOps concepts and challenges}},
volume = {52},
year = {2019}
}
@article{Ahmad2022,
abstract = {Notebooks have gained wide popularity in scientific computing. A notebook is both a web-based interactive front-end to program workflows and a lightweight container for sharing code and its output. Reproducing notebooks in different target environments, however, is a challenge. Notebooks do not share the computational environment in which they are executed. Consequently, despite being shareable they are often not reproducible. The application virtualization (AV) method enables shareability and reproducibility of applications in heterogeneous environments. AV-based tools, however, encapsulate non-interactive, batch applications. In this paper, we present FLINC, a user-space method and tool for creating reproducible notebook containers. FLINC virtualizes the notebook process that enables interactive computation and creates notebook containers, which include the environment and all data dependencies accessed by the notebook file. It relies on provenance collected during virtualization to ensure the correct behavior of a notebook when run repeatedly in different environments. We demonstrate how FLINC exports notebook containers seamlessly to non-notebook environments. Our experiments show that FLINC creates lighter weight containers as compared to equivalent non-interactive, batch containers, and preserves the same interactive workflow for the user as in current notebook platforms.},
author = {Ahmad, Raza and Manne, Naga Nithin and Malik, Tanu},
doi = {10.1109/eScience55777.2022.00015},
file = {:Users/aariaz/Downloads/Reproducible_Notebook_Containers_using_Application_Virtualization.pdf:pdf},
isbn = {9781665461245},
journal = {Proceedings - 2022 IEEE 18th International Conference on e-Science, eScience 2022},
keywords = {application virtualization,notebook containers,notebook reproducibility,provenance},
pages = {1--10},
title = {{Reproducible Notebook Containers using Application Virtualization}},
year = {2022}
}
@misc{Docker2024,
author = {Docker},
booktitle = {Docker},
title = {{Docker Index: Dramatic Growth in Docker Usage Affirms the Continued Rising Power of Developers}},
url = {https://www.docker.com/blog/docker-index-dramatic-growth-in-docker-usage-affirms-the-continued-rising-power-of-developers/},
year = {2024}
}
@misc{Docker2021,
author = {Docker},
booktitle = {Docker},
title = {{Developers Bring Their Ideas to Life with Docker}},
url = {https://www.docker.com/why-docker},
year = {2021}
}
@article{Yokoyama2012,
abstract = {This paper presents the impact analysis of the hy-pervisor layer over database applications. The conclusions were reached by performing experiments with hybrid environments, composed by bare-metal servers and two types of hypervisors. The main objectives were to compare the behaviour of database applications and to determine the maximum service capacity of a virtualized database server on different environments. With the results, it was possible to assess the scalability of a database environment, according to the type of hypervisor and the number of simultaneous connections, and decide how and when to expand or reduce the virtualized infrastructure. {\textcopyright} 2012 IEEE.},
author = {Yokoyama, Daniel and Dias, Victor and Kloh, Henrique and Bandini, Matheus and Porto, Fabio and Schulze, Bruno and Mury, Antonio},
doi = {10.1109/UCC.2012.28},
file = {:Users/aariaz/Downloads/yokoyama2012.pdf:pdf},
isbn = {9780769548623},
journal = {Proceedings - 2012 IEEE/ACM 5th International Conference on Utility and Cloud Computing, UCC 2012},
pages = {247--254},
title = {{The impact of hypervisor layer on database applications}},
year = {2012}
}
@article{Li2010,
abstract = {With the development of the computer technology, the virtual machine has been become the main research topic. Understanding of the current technology and future trends of virtual machine system greatly help to improve the service performance of system. Therefore, we describe the current technology and present the future trends of virtual machine system in the paper. In the current technology of virtual machine system, we mainly describe the virtualization technology, the resource scheduling technology, the migration technology, the security technology and the performance evaluation technology. In the future trends of virtual machine system, we mainly present an overview of the future CPU architecture, the management mode of future memory and resource, the future maintaining method of system security and the performance evaluation method of future multiple virtual machine system. {\textcopyright} 2010 IEEE.},
author = {Li, Yunfa and Li, Wanqing and Jiang, Congfeng},
doi = {10.1109/ISECS.2010.80},
file = {:Users/aariaz/Downloads/virtualization - definition.pdf:pdf},
isbn = {9780769542195},
journal = {3rd International Symposium on Electronic Commerce and Security, ISECS 2010},
keywords = {Migration,Performance evaluation,Resource scheduling,Security,Virtual machine system},
pages = {332--336},
title = {{A survey of virtual machine system: Current technology and future trends}},
year = {2010}
}
@article{Groom2018,
abstract = {The goal of operating a cloud is to deliver cloud services efficiently, reliably, cost-effectively, and securely. This can be difficult to achieve and success ­depends on several supporting activities. Overall, though, the way an organization benefits from cloud computing will depend on how it assesses its ­information and communication resources and how it envisions its transition to cloud computing. Although private clouds can achieve immense scale and can serve many internal customers, most private clouds will likely be on the small side. This gives public clouds several advantages in terms of return on investment for tools and security capabilities that are expensive or require an investment in expertise to properly implement and operate. Earlier chapters surveyed current cloud services and delivery models and examined cloud security and architecture. This chapter picks up on the knowledge imparted in those earlier chapters, and focuses on operating a cloud from a security perspective.},
author = {Groom, Frank M.},
doi = {10.1201/9781351049221-1},
file = {:Users/aariaz/Downloads/152759075583.pdf:pdf},
journal = {Enterprise Cloud Computing for Non-Engineers},
pages = {1--42},
title = {{The Basics of Cloud Computing}},
year = {2018}
}
@article{Jain2016,
abstract = {The hottest area of research in these days is cloud computing which goes in parallel with one more important concept in the development of hardware and software, virtualization technology. In this research paper, we will discuss about virtualization, before and after virtualization, its role in cloud computing, brief view about hypervisor, storage virtualization, server virtualization, benefits of virtualization.},
author = {Jain, Nancy and Choudhary, Sakshi},
doi = {10.1109/CDAN.2016.7570950},
file = {:Users/aariaz/Desktop/cites-extenso/AN-OVERVIEW-OF-VIRTUALIZATION-CLOUD-COMPUTING.pdf:pdf},
isbn = {9781509006694},
journal = {2016 Symposium on Colossal Data Analysis and Networking, CDAN 2016},
keywords = {Cloud Computing,Hypervisor,Server virtualization,Storage virtualization,Virtualization},
title = {{Overview of virtualization in cloud computing}},
year = {2016}
}
@article{Dordevic2022,
abstract = {The main objective of this paper is to find the optimal guest file system for hypervisor-based virtualization with the Oracle's VirtualBox virtual machines. For this research, we decided to measure file system performances, in equal conditions and apply the same test method. For testing purposes, we used Filebench software, which guarantees equality and independence of the hardware and operating system characteristics. CentOS 7.9 with the latest updates is used as the guest operating system, while VirtualBox 6.1 is used as the hypervisor. Performances are compared for the cases of one and two virtual machines running simultaneously. Expected behaviors are analyzed with Filebench, while the results are used to verify the assumption.},
author = {Dordevic, Borislav and Kraljevic, Nenad and Dzuverovic, Boris},
doi = {10.1109/TELFOR56187.2022.9983783},
file = {:Users/aariaz/Downloads/Optimal_guest_file_system_for_type-2_hypervisor-based_virtualization_in_Virtual_box.pdf:pdf},
isbn = {9781665472739},
journal = {2022 30th Telecommunications Forum, TELFOR 2022 - Proceedings},
keywords = {CentOS,Filebench,Hypervisors,Oracle,Virtual Machines,VirtualBox,Virtualization},
pages = {31--34},
title = {{Optimal guest file system for type-2 hypervisor-based virtualization in Virtual box}},
year = {2022}
}
@article{Sepulveda-Rodriguez2021,
abstract = {Currently, there is a proliferation of technological tools with a Science Gateway approach. For IT administrators manage these kinds of tools is not a trivial activity, although there is a significant volume of related studies. This situation represents a latent challenge to IT administrators in TERS (Technology Ecosystem for Research Support). This paper analyzes and classifies studies related to IT resources and services management applicable to this type of technology ecosystem. Methodologically we used an adaptation of guidelines aimed at the construction of a SMS (Systematic Mapping Study). Additionally, we performed an analysis of the papers to recognize inferences and trends in them, which allowed us to claim that cloud computing technology plays a predominant role. We consider it good practice for implementations that support research processes. In this sense, we recommend to those interested in this topic to prioritize cloud technologies to achieve an adequate management of the set of IT resources and services used to support Science Gateway environments.},
author = {Sep{\'{u}}lveda-Rodr{\'{i}}guez, Luis E. and Garrido, Jos{\'{e}} Luis and Chavarro-Porras, Julio C. and Sanabria-Ordo{\~{n}}ez, John A. and Candela-Uribe, Christian A. and Rodr{\'{i}}guez-Dom{\'{i}}nguez, Carlos and Guerrero-Contreras, Gabriel},
doi = {10.1007/s10723-021-09587-7},
file = {:Users/aariaz/Downloads/Study_based_Systematic_Mapping_Analysis (4).pdf:pdf},
issn = {15729184},
journal = {Journal of Grid Computing},
keywords = {Cloud computing,IT management,Research infrastructure,Science gateway},
number = {4},
pages = {1--28},
title = {{Study-based Systematic Mapping Analysis of Cloud Technologies for Leveraging IT Resource and Service Management: The Case Study of the Science Gateway Approach}},
volume = {19},
year = {2021}
}
@article{CMMIInstitute2010,
abstract = {El Marco CMMI es la estructura b{\'{a}}sica que organiza los componentes de CMMI y los combina en las constelaciones y modelos CMM},
author = {{CMMI Institute}},
file = {:Users/aariaz/Downloads/CMMI - DAR.pdf:pdf},
number = {1},
pages = {1--555},
title = {{CMMI {\textregistered} para Desarrollo, Versi{\'{o}}n 1.3 Equipo del Producto CMMI}},
url = {http://www.sei.cmu.edu},
volume = {1},
year = {2010}
}
@article{Ahmadi2024,
abstract = {Cloud computing plays a significant role in modern information technology, providing organizations with numerous benefits, including flexibility, scala-bility, and cost-efficiency. However, it has become essential for organizations to ensure the security of their applications, data, and cloud-based networks to use cloud services effectively. This systematic literature review aims to determine the latest information regarding cloud computing security, with a specific emphasis on threats and mitigation strategies. Additionally, it highlights some common threats related to cloud computing security, such as distributed denial-of-service (DDoS) attacks, account hijacking, malware attacks, and data breaches. This research also explores some mitigation strategies, including security awareness training, vulnerability management, security information and event management (SIEM), identity and access management (IAM), and encryption techniques. It discusses emerging trends in cloud security , such as integrating artificial intelligence (AI) and machine learning (ML), serverless computing, and containerization, as well as the effectiveness of the shared responsibility model and its related challenges. The importance of user awareness and the impact of emerging technologies on cloud security have also been discussed in detail to mitigate security risks. A literature review of previous research and scholarly articles has also been conducted to provide insights regarding cloud computing security. It shows the need for continuous research and innovation to address emerging threats and maintain a security-conscious culture in the company.},
author = {Ahmadi, Sina},
doi = {10.4236/jis.2024.152010},
file = {:Users/aariaz/Downloads/ssrn-4775074.pdf:pdf},
issn = {2153-1234},
journal = {Journal of Information Security},
keywords = {Cloud Security, Threat Analysis, Mitigation Strate},
number = {02},
pages = {148--167},
title = {{Systematic Literature Review on Cloud Computing Security: Threats and Mitigation Strategies}},
volume = {15},
year = {2024}
}
@article{Jayaweera2024,
abstract = {Cloud computing is one of the most rapidly growing computing concepts in today's information technology world. It connects data and applications from various geographical locations. A large number of transactions and the hidden infrastructure in cloud computing systems have presented the research community with several challenges. Among these, maintaining cloud network security has emerged as a major challenge. It is critical to address issues in the quickly changing cloud computing market in order to guarantee that businesses can fully utilize cutting-edge technology, uphold strong security protocols, and maximize operational effectiveness. Businesses that successfully navigate these obstacles can maintain their competitiveness in a dynamic digital ecosystem by improving scalability, leveraging the flexibility provided by the cloud, and adapting to technological changes with ease. Anomaly detection (or outlier detection) is the identification of unusual or suspicious data that differs significantly from the majority of the data. Research on anomaly detection in cloud network data is crucial because it enables businesses to more rapidly and efficiently recognize potential security threats, network performance concerns, and other issues. Recently, machine learning methods have demonstrated their efficacy in anomaly detection. This research aimed to introduce a novel hybrid model for anomaly detection in cloud network data and to investigate the performance of this model in comparison to other machine learning algorithms. The research was conducted with the UNSW-NB15 anomaly dataset and employed various feature selection and pre-processing techniques to prepare the data for model training. The hybrid model was built using a combination of Random Forest and SVM algorithms and the process was evaluated using metrics such as F1-Score, Recall, Precision, and Accuracy. The result showed that the hybrid model has 94.23% accuracy and a total time of 109.92s which is the combination of the train time of 100.45s and prediction time of 9.47s. The limitations of the study include the class imbalance problem in the dataset and the lack of real-world applications for testing. The research suggests future work in the application of hybrid models in anomaly detection and cloud network security and the need for further investigation into the potential benefits of such models},
author = {Jayaweera, Mpgk and Kithulwatta, Wmcjt and Rathnayaka, Rmkt},
file = {:Users/aariaz/Desktop/cites-extenso/IJRC 2024 V2-ISSUE 2-2.pdf:pdf},
keywords = {anomaly detection,cloud computing,machine learning,monitoring},
journal = {International Journal of Research in Cloud Computing},
title = {{An Approach to Examine and Recognize Anomalies on Cloud Computing Platforms with Machine}},
year = {2024}
}
@article{SepulvedaRodriguez2022,
abstract = {At present, there is a proliferation of virtualization technologies (VTs), which are part of the basic and underlying infrastructure of popular cloud computing. Those interested in VTs are faced with a non-unified volume of information and various approaches to modes of operation, classification structures, and the performance implications of these technologies. This makes it difficult to decide which type of VT is appropriate for a particular context. Therefore, this paper reviews the state of the art on VT taxonomic models. Methodologically, a literature review is carried out to identify VT classification models, recognizing their features and weaknesses. With this in mind, a new taxonomy of virtualization technologies is proposed, which responds to the weaknesses identified in the analyzed schemes. The new VT taxonomy combines the Abstraction Level and Virtual Machine Type approaches, providing the reader with a means to visualize VTs. In doing so, the reader can locate the level of abstraction at which each VT is developed, in addition to the type of machine projected, whether it is a complete system or an execution environment for processes. The proposed taxonomy can be used in the academic environment to facilitate teaching processes or in the business environment to facilitate decision-making when implementing VTs.},
author = {Sep{\'{u}}lveda-Rodr{\'{i}}guez, Luis E. and Chavarro-Porras, Julio C. and Sanabria-Ordo{\~{n}}ez, John A. and Castro, Harold E. and Matthews, Jeanna},
doi = {10.15446/ing.investig.97363},
issn = {22488723},
journal = {Ingenieria e Investigacion},
keywords = {container,taxonomy,virtual machine,virtualization,virtualization technologies},
number = {3},
title = {{A Survey of Virtualization Technologies: Towards a New Taxonomic Proposal}},
url = {https://openurl-ebsco-com.crai.referencistas.com/contentitem/edsdia:edsdia.ART0001545825?sid=ebsco:plink:crawler&id=ebsco:edsdia:edsdia.ART0001545825&crl=c},
volume = {42},
year = {2022}
}
@book{project2017guia,
author = {Institute, Project Management},
isbn = {9781628251944},
publisher = {Project Management Institute},
title = {{Guia de los Fundamentos Para la Direccion de Proyectos: Guia del Pmbok}},
url = {https://books.google.com.co/books?id=MNRHAQAACAAJ},
year = {2017}
}
@article{LuisJoyanes2010,
abstract = {La Computaci{\'{o}}n en Nube o Inform{\'{a}}tica en Nube (Cloud Computing) se ha convertido en un nuevo paradigma tecnol{\'{o}}gico de gran impacto social. La Nube (The Cloud) es el conjunto «infinito» de servidores de informaci{\'{o}}n (computadores) desplegados en centros de datos, a lo largo de todo el mundo donde se almacena millones de aplicaciones Web y enormes cantidades de datos (big data), a disposici{\'{o}}n de miles de organizaciones y empresas, y cientos de miles de usuarios que se descargan y ejecutan directamente los programas y aplicaciones de software almacenados en dichos servidores tales como Google Maps, Gmail, Facebook, Tuenti o Flickr. La Nube est{\'{a}} propiciando una nueva revoluci{\'{o}}n industrial soportada en las f{\'{a}}bricas de «datos» (Centros de Datos, Data Centers) y f{\'{a}}bricas de «aplicaciones Web» (Web Apps). Esta nueva revoluci{\'{o}}n producir{\'{a}} un gran cambio social, econ{\'{o}}mico y tecnol{\'{o}}gico, pero al contrario que otras revoluciones ser{\'{a}} «silenciosa» al igual que lo ha sido la implantaci{\'{o}}n Internet y la Web en la Sociedad.},
author = {{Luis Joyanes}},
file = {:Users/aariaz/Downloads/Cloud_Computing_y_Centros_de_Datos.pdf:pdf},
issn = {1133-6706},
journal = {Sociedad y Utop{\'{i}}a: Revista de Ciencias Sociales},
keywords = {aplicaci{\'{o}}n web,centro de datos,computaci{\'{o}}n,en la nube,fabricas de aplicaciones,f{\'{a}}brica de datos,h{\'{i}}brida,iaas,inform{\'{a}}tica,nube,nube privada,nube p{\'{u}}blica,paas,saas},
pages = {111--127},
title = {{Computaci{\'{o}}n en Nube (Cloud Computing) y Centros de Datos: la nueva revoluci{\'{o}}n industrial.¿ C{\'{o}}mo cambiar{\'{a}} el trabajo en organizaciones y empresas?}},
url = {http://europa.sim.ucm.es/compludoc/AA?articuloId=775954},
volume = {2010},
year = {2010}
}
@article{13980364820191001,
abstract = {Virtualization technologies have evolved along with the development of computational environments. Virtualization offered needed features at that time such as isolation, accountability, resource allocation, resource fair sharing and so on. Novel processor technologies bring to commodity computers the possibility to emulate diverse environments where a wide range of computational scenarios can be run. Along with processors evolution, developers have implemented dierent virtualization mechanisms exhibiting enhanced performance from previous virtualized environments. Recently, operating system-based virtualization technologies captured the attention of communities abroad because their important improvements on performance area. In this paper, the features of three container-based operating systems virtualization tools (LXC, Docker and Singularity) are presented. LXC, Docker, Singularity and bare metal are put under test through a customized single node HPL-Benchmark and a MPI-based appli},
author = {Arangol, Carlos and Dernat, R{\'{e}}my and Sanabrial, John},
issn = {1657-4583},
journal = {UIS Ingenier{\'{i}}as},
keywords = {HIGH performance computing; PERFORMANCE evaluation},
number = {4},
pages = {31--42},
title = {{Performance evaluation of container-based virtualization for high performance computing environments.}},
url = {https://research.ebsco.com/linkprocessor/plink?id=82cbc184-5c65-3920-ae17-92ef640fd990},
volume = {18},
year = {2019}
}
@techreport{ISO9001,
abstract = {The current trend toward integration of the physical and information processing layers of manufacturing systems combined with the new emphasis on building quality products has placed increased demands on quality management systems. There are typically three components to a quality system. The first is the application system consisting of the application software used to collect, analyze and report the information. The second part is the physical environment and its connection to the application system. This environment consists of data collection terminals, automatic test equipment (ATE) and the process control equipment. It also includes the necessary hardware and software to connect this equipment to the application system. The third component is the people who will make use of the information produced by the application from the data collected in the physical environment. This human component includes inspectors, shop supervisors and knowledge workers such as engineers and managers. These components are individually discussed.},
address = {Ginebra, Suiza},
author = {Porfert, J.},
doi = {10.4324/9781315847115-3},
institution = {International Organization for Standardization},
isbn = {0948507349},
pages = {1--2},
title = {{Quality Management Systems.}},
type = {Standard},
volume = {2015},
year = {1986}
}
@misc{Nardinelli2016,
author = {Nardinelli, Clark},
booktitle = {Library of Economics and Liberty},
pages = {12--14},
title = {{Industrial Revolution and the Standard of Living}},
url = {https://www.econlib.org/library/Enc/IndustrialRevolutionandtheStandardofLiving.html},
year = {2016}
}
@article{Sepulveda-Rodriguez2022,
abstract = {At present, there is a proliferation of virtualization technologies (VTs), which are part of the basic and underlying infrastructure of popular cloud computing. Those interested in VTs are faced with a non-unified volume of information and various approaches to modes of operation, classification structures, and the performance implications of these technologies. This makes it difficult to decide which type of VT is appropriate for a particular context. Therefore, this paper reviews the state of the art on VT taxonomic models. Methodologically, a literature review is carried out to identify VT classification models, recognizing their features and weaknesses. With this in mind, a new taxonomy of virtualization technologies is proposed, which responds to the weaknesses identified in the analyzed schemes. The new VT taxonomy combines the Abstraction Level and Virtual Machine Type approaches, providing the reader with a means to visualize VTs. In doing so, the reader can locate the level of abstraction at which each VT is developed, in addition to the type of machine projected, whether it is a complete system or an execution environment for processes. The proposed taxonomy can be used in the academic environment to facilitate teaching processes or in the business environment to facilitate decision-making when implementing VTs.},
author = {Sep{\'{u}}lveda-Rodr{\'{i}}guez, Luis E. and Chavarro-Porras, Julio C. and Sanabria-Ordo{\~{n}}ez, John A. and Castro, Harold E. and Matthews, Jeanna},
doi = {10.15446/ing.investig.97363},
file = {:Users/aariaz/Downloads/revii_bog,+RIIv42n3Art_97363+RV1.pdf:pdf},
issn = {22488723},
journal = {Ingenieria e Investigacion},
keywords = {container,taxonomy,virtual machine,virtualization,virtualization technologies},
number = {3},
pages = {1--14},
title = {{A Survey of Virtualization Technologies: Towards a New Taxonomic Proposal}},
volume = {42},
year = {2022}
}
@misc{Lucas2013,
author = {Lucas, Robert E and Smith, Adam and Ricardo, David},
pages = {1--14},
title = {{The Industrial Revolution : Past and Future 2003 Annual Report Essay}},
url = {https://www.minneapolisfed.org/article/2004/the-industrial-revolution-past-and-future},
urldate = {2024-10-05},
year = {2013}
}
@article{Pakkala2022,
author = {Pakkala, Lauri},
file = {:Users/aariaz/Downloads/Opinn{\"{a}}ytety{\"{o}}_Pakkala_Lauri.pdf:pdf},
number = {November},
title = {{Measuring Capability for Cloud Infra-structure Adoption in Software Pro-duction for Finnish Non-profit Organi-sations}},
year = {2022}
}
@article{Ali2022,
abstract = {Recently, Apple shifted entirely from Intels x86 family of (CISC ISA) to their newly designed series of ARM (RISC ISA) SoC (System On the chip) called the M1 series. So, the decades-old debate CISC ISA vs RISC ISA is trying to ember inside the architecture field. Researchers are trying to find what could be the reason Apple switched its instruction set architecture. Our study indicates that the RISC being more power-efficient consuming less energy and having better thermal properties outranked the CISC. That could be a potential reason that Apple switched from CISC to RISC and from now on theyll focus on developing their ecosystem around this architecture. ARM in IoT can increase the battery timing of these devices and can eliminate the need for a cooling fan, thus reducing the overall cost of the device. The energy consumption of Data centers and servers can be reduced 3x to 4x by using ARM chips as compared to x86 chipsets, a step towards green computing. The study also revealed that in the modern era power consumption and performance are two of the most important factors when designing or choosing an architecture. As people want their laptops and mobiles to have a battery that can last longer and computing power to run heavy applications. ARM design can fulfill demands for many years to come.},
author = {Ali, Zohaib and Tanveer, Talha and Aziz, Samia and Usman, Muhammad and Azam, Awais},
doi = {10.1109/ICIT56493.2022.9988933},
file = {:Users/aariaz/Downloads/Reassessing_the_Performance_of_ARM_vs_x86_with_Recent_Technological_Shift_of_Apple.pdf:pdf},
isbn = {9781665489454},
journal = {2022 International Conference on IT and Industrial Technologies, ICIT 2022},
keywords = {ARM,CISC ISA,Green computing,M1 SoC,Performance,RISC ISA,energy consumption,x86},
pages = {1--6},
publisher = {IEEE},
title = {{Reassessing the Performance of ARM vs x86 with Recent Technological Shift of Apple}},
year = {2022}
}
@misc{Zobel2016,
author = {Zobel, Justin},
booktitle = {World Economic Forum website},
title = {{The computer revolution: how it's changed our world over 60 years}},
url = {https://www.weforum.org/agenda/2016/06/the-computer-revolution-how-its-changed-our-world-over-60-years},
year = {2016}
}
@article{Gomez2020,
abstract = {Desktop clouds (DC) provide services in non-stationary environments that face reliability and performance threats not found in traditional clusters and datacenters. The idle resources available on computers can be claimed by users, turned off and faulted any time. For instance, platforms such as CernVM and UnaCloud harvest idle resources on computer labs to run virtual machines and support scientific applications. These platforms deal with interruptions and interferences caused by both users and applications. This non-stationarity is one of the main sources of issues in the design of reliable desktop cloud infrastructures that are capable of mitigating their own faults and errors. Based on a fault analysis that we have been carrying out and refining for a couple of years, we have found that reliability problems begin as the number of virtual machines that are going to be executed increases; these virtual machines must first be provisioned in the physical machines where they will be hosted. On the one hand, the main factors that can affect the provisioning of virtual machines in a DC are: the use of disk space, and the transmission of virtual images over the network. On the other hand, the applications and actions performed by users in the desktops may cause the virtual machine malfunction. In this paper, we propose an strategy based on known techniques applied to a particular environment: the scalable provisioning of virtual machines in desktop clouds. In addition, we describe the implementation and analyze its effectiveness.},
author = {G{\'{o}}mez, Carlos E. and Chavarriaga, Jaime and Tchernykh, Andrei and Castro, Harold E.},
doi = {10.1007/978-3-030-48340-1_51},
file = {:Users/aariaz/Downloads/978-3-030-48340-1_51.pdf:pdf},
isbn = {9783030483395},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Chain of threats,Fault tolerance,Reliability,VM provisioning},
number = {Dc},
pages = {669--680},
title = {{Improving Reliability for Provisioning of Virtual Machines in Desktop Clouds}},
volume = {11997 LNCS},
year = {2020}
}
@article{Gray2022,
abstract = {ISO Standards provide a minimal benchmark for organisations to achieve accreditation or certification and maintain compliance to the core elements of the standard. These standards assist organisations in establishing and maintaining a quality management system. Business Excellence models are integrated collections of proven activities for how an organisation should operate to pursue excellence or world-class performance and sustainability. The focus is on the customers and internal processes to meet customer expectations. The pursuit of ISO compliance and business excellence are interrelated, synergistic and will lead to common approaches for progress and sustainability if well managed. Embracing quality assurance systems, tools of organisational excellence and benchmarking against the best international standards and practices are essential for businesses operating in a global community. The Royal College of Pathologists of Australasia Quality Assurance Programs Pty Ltd has long been a compliance-driven organisation, but more recently embraced the pursuit of business excellence by adopting the Australian Business Excellence Framework. These two approaches to quality management and continual improvement are compared and the value of incorporating both approaches is explored.},
author = {Gray, Joanna and Ross, Jennifer and Badrick, Tony},
doi = {10.1007/s00769-022-01503-0},
file = {:Users/aariaz/Downloads/s00769-022-01503-0.pdf:pdf},
isbn = {0123456789},
issn = {14320517},
journal = {Accreditation and Quality Assurance},
keywords = {Business excellence framework,Cultural change,ISO standards,Process improvement},
number = {4},
pages = {195--203},
publisher = {Springer Berlin Heidelberg},
title = {{The path to continual improvement and business excellence: compliance to ISO standards versus a business excellence approach}},
url = {https://doi.org/10.1007/s00769-022-01503-0},
volume = {27},
year = {2022}
}
@misc{ISO25010,
  author = {BSI},
  title = {{BSI Standards Publication: Systems and Software Engineering — Systems and Software Quality Requirements and Evaluation (SQuaRE) — System and Software Quality Models}},
  year = {2011},
  note = {BS ISO/IEC 25010:2011},
  url = {https://bsol-bsigroup-com.lcproxy.shu.ac.uk/Bibliographic/BibliographicInfoData/000000000030215101},
  howpublished = {\url{https://bsol-bsigroup-com.lcproxy.shu.ac.uk/Bibliographic/BibliographicInfoData/000000000030215101}},
}

@article{Cinque2024,
abstract = {Today, we are witnessing the increasing use of the cloud and virtualization technologies, which are a prominent way for the industry to develop mixed-criticality systems (MCSs) and reduce SWaP-C factors (size, weight, power, and cost) by flexibly consolidating multiple critical and non-critical software on the same System-on-a-Chip (SoC). Unfortunately, using virtualization leads to several issues in assessing isolation aspects, especially temporal behaviors, which must be evaluated due to safety-related standards (e.g., EN50128 in the railway domain). This study proposes a systematic approach for verifying temporal isolation properties in virtualized MCSs to characterize and mitigate timing failures, which is a fundamental aspect of dependability. In particular, as proof of the effectiveness of our proposal, we exploited the real-time flavor of Xen hypervisor used to deploy a virtualized 2 out of 2-based MCS scenario provided in the framework of an academic-industrial partnership, in the context of the railway domain. The results point out that virtualization overhead must be carefully tuned in a real industrial scenario according to the several features provided by a specific hypervisor solution. Further, we identify a set of directions toward employing virtualization in industry in the context of ARM-based mixed-criticality systems.},
author = {Cinque, Marcello and {De Simone}, Luigi and Ottaviano, Daniele},
doi = {https://doi.org/10.1016/j.jss.2024.112147},
issn = {0164-1212},
journal = {Journal of Systems and Software},
keywords = {ARM,Dependability,EN50128,Railway,Software certification,Temporal isolation,Virtualization,Xen},
pages = {112147},
title = {{Temporal isolation assessment in virtualized safety-critical mixed-criticality systems: A case study on Xen hypervisor}},
url = {https://www.sciencedirect.com/science/article/pii/S0164121224001924},
volume = {216},
year = {2024}
}
@misc{Agan2023,
abstract = {Consumer choices are increasingly mediated by algorithms, which use data on those past choices to infer consumer preferences and then curate future choice sets. Behavioral economics suggests one reason these algorithms so often fail: choices can systematically deviate from preferences. For example, research shows that prejudice can arise not just from preferences and beliefs, but also from the context in which people choose. When people behave automatically, biases creep in; snap decisions are typically more prejudiced than slow, deliberate ones, and can lead to behaviors that users themselves do not consciously want or intend. As a result, algorithms trained on automatic behaviors can misunderstand the prejudice of users: the more automatic the behavior, the greater the error. We empirically test these ideas in a lab experiment, and find that more automatic behavior does indeed seem to lead to more biased algorithms. We then explore the large-scale consequences of this idea by carrying out algorithmic audits of Facebook in its two biggest markets, the US and India, focusing on two algorithms that differ in how users engage with them: News Feed (people interact with friends' posts fairly automatically) and People You May Know (people choose friends fairly deliberately). We find significant out-group bias in the News Feed algorithm (e.g., whites are less likely to be shown Black friends' posts, and Muslims less likely to be shown Hindu friends' posts), but no detectable bias in the PYMK algorithm. Together, these results suggest a need to rethink how large-scale algorithms use data on human behavior, especially in online contexts where so much of the measured behavior might be quite automatic.},
author = {Agan, Amanda and Davenport, Diag and Ludwig, Jens and Mullainathan, Sendhil},
booktitle = {SSRN Electronic Journal},
doi = {10.2139/ssrn.4364729},
title = {{Automating Automaticity: How the Context of Human Choice Affects the Extent of Algorithmic Bias}},
url = {https://www.nber.org/papers/w30981},
year = {2023}
}
@misc{CNCF2023,
author = {CNCF},
doi = {10.30875/9789287074300-04.zhtml},
pages = {7--8},
title = {{Who we are}},
url = {https://www.cncf.io/about/who-we-are/},
year = {2023}
}
@misc{edsdoj.36e61c3c629a466a939042a7144119eb20201201,
abstract = {Los contenedores se han convertido es una estrategia ideal para acelerar el proceso de desarrollo de plataformas. Su importancia radica en la capacidad que tienen para separar una aplicaci{\'{o}}n e interactuar con sus partes sin que la totalidad de la aplicaci{\'{o}}n tenga que ser afectada. Los contenedores pueden compartir procesos entre varias aplicaciones, de manera muy similar al esquema propuesto por la arquitectura orientada a servicios. El objetivo de esta investigaci{\'{o}}n fue definir una arquitectura para el despliegue autom{\'{a}}tico de contenedores en contextos acad{\'{e}}micos, la verificaci{\'{o}}n y validaci{\'{o}}n de la arquitectura se realiz{\'{o}} mediante la construcci{\'{o}}n de una plataforma que adapta los conceptos de la arquitectura y permite visualizar nivel a nivel cada uno de sus componentes. Se realiz{\'{o}} un an{\'{a}}lisis bibliogr{\'{a}}fico sobre las arquitecturas propuestas para la gesti{\'{o}}n de contenedores, evidenciando fortalezas y debilidades.  El resultado directo de esta investigaci{\'{o}}n fue la propuesta arquitect{\'{o}}nica para el despliegue de contenedores como una extensi{\'{o}}n de docker. El resultado indirecto fue la plataforma web para la verificaci{\'{o}}n y validaci{\'{o}}n de la arquitectura.   },
author = {{Guti{\'{e}}rrez L{\'{o}}pez}, Luz Elena and {Guerrero Alarc{\'{o}}n}, Carlos Andr{\'{e}}s},
booktitle = {Ingeniare},
doi = {10.18041/1909-2458/ingeniare.29.7432},
howpublished = {${howpublished}},
issn = {1909-2458},
keywords = {administraci{\'{o}}n web; contenedor; desarrollo de soft},
number = {29},
pages = {11--26},
title = {{Extensi{\'{o}}n de la arquitectura Docker para el despliegue autom{\'{a}}tico de contenedores}},
url = {https://research.ebsco.com/linkprocessor/plink?id=cdd921d3-f36f-3ce5-b5da-f2b33b75a748},
year = {2020}
}
@article{owid-internet,
annote = {https://ourworldindata.org/internet},
author = {Ritchie, Hannah and Mathieu, Edouard and Roser, Max and Ortiz-Ospina, Esteban},
journal = {Our World in Data},
title = {{Internet}},
year = {2023}
}
@misc{edsdoj.0ff8a839fb914b1b90d3e58718cae34320240501,
abstract = {La creciente relevancia de la contenerizaci{\'{o}}n y la computaci{\'{o}}n en la nube destaca la necesidad de investigar {\'{a}}reas emergentes para abordar desaf{\'{i}}os cruciales en la gesti{\'{o}}n de recursos inform{\'{a}}ticos. El objetivo de este art{\'{i}}culo es identificar tendencias investigativas en el uso de Cloud Computing en contenerizaci{\'{o}}n entre 2015 y 2023. La metodolog{\'{i}}a plante{\'{o}} un enfoque exploratorio, a partir de un estudio bibliom{\'{e}}trico, usando las bases de datos Scopus y Web of Science, por medio de las cuales se obtuvieron 136 documentos acad{\'{e}}micos, analizados a trav{\'{e}}s de una serie de indicadores bibliom{\'{e}}tricos de estructura. El estudio revel{\'{o}} resultados significativos para la agenda investigativa, abordando {\'{a}}reas cruciales de contenerizaci{\'{o}}n y computaci{\'{o}}n en la nube, como Docker, Kubernetes, Edge Computing y M{\'{a}}quinas Virtuales. Adem{\'{a}}s, destac{\'{o}} l{\'{i}}deres en investigaci{\'{o}}n y pa{\'{i}}ses influyentes en la producci{\'{o}}n cient{\'{i}}fica, donde Estados Unidos y Francia se destacan en estos campos. Se observa el surgimiento de temas emergentes, como Evaluaci{\'{o}}n del Rendimiento y Orquestaci{\'{o}}n de Contenedores, se{\~{n}}alando {\'{a}}reas de crecimiento en la investigaci{\'{o}}n.},
author = {Valencia-Arias, Alejandro and {Echeverri Guti{\'{e}}rrez}, Camilo Andr{\'{e}}s and {Acosta Agudelo}, Leidy Catalina and {Echeverri Guti{\'{e}}rrez}, Mauricio Stiven},
booktitle = {Revista Virtual Universidad Cat{\'{o}}lica del Norte},
doi = {10.35575/rvucn.n72a12},
howpublished = {${howpublished}},
keywords = {cloud computing; kubernetes; orquestaci{\'{o}}n de conte},
number = {72},
pages = {306--344},
title = {{Tendencias investigativas en el uso de Cloud Computing en contenerizaci{\'{o}}n entre 2015 y 2023}},
url = {https://research.ebsco.com/linkprocessor/plink?id=9619f7ac-0003-3c90-8668-2b5e5ae8da84},
year = {2024}
}
@misc{Sargent2023,
author = {Sargent, Daniel J.},
booktitle = {New Global Studies},
doi = {10.1515/ngs-2022-0044},
number = {2},
pages = {257--260},
title = {{ Jeffrey E. Garten: Three Days at Camp David: How a Secret Meeting in 1971 Transformed the Global Economy }},
url = {https://www.imf.org/en/Publications/fandd/issues/2018/06/impact-of-digital-technology-on-economic-growth-muhleisen},
volume = {17},
year = {2023}
}
@article{Kaiser2022,
abstract = {Container technology is becoming increasingly popular as an alternative to traditional virtual machines because it provides a faster, lighter, and more portable runtime environment for the applications. A container bundles the application and its binary code, libraries, and configuration files together while sharing the host operating system image. Accordingly, containers efficiently share resources and operate small micro-services, software programs, and even more extensive applications with less overhead than virtual machines. There are many container technologies available with Docker being the most popular and many technologies support multiple architectures, including the ARM architecture. Due to its energy efficiency and high-performance, which are crucial parameters in containerization, ARM architecture is becoming prevalent in container technologies. In this paper, we explore various container technologies that support ARM architecture and investigate the pros and cons of each technology. Moreover, we provide a comparative analysis of both container orchestrators and container runtimes that are most prominent competitors of Docker. We also consider security of container technologies with particular focus on the image scanning tools that supports ARM architecture. Our survey reveals that ARM technology is gaining popularity in containerization and almost all recent technologies support ARM architecture.},
author = {Kaiser, Shahidullah and Haq, Md Sadun and Tosun, Ali Saman and Korkmaz, Turgay},
doi = {10.1109/ACCESS.2022.3197151},
file = {:Users/aariaz/Downloads/Container_Technologies_for_ARM_Architecture_A_Comprehensive_Survey_of_the_State-of-the-Art.pdf:pdf},
issn = {21693536},
journal = {IEEE Access},
keywords = {ARM architecture,Docker,HPC,IoT,Linux container,cloud computing,container orchestration,container runtimes,container security,container technology,edge computing},
month = {jan},
pages = {84853--84881},
publisher = {IEEE},
title = {{Container Technologies for ARM Architecture: A Comprehensive Survey of the State-of-the-Art}},
url = {https://doaj.org/article/c6d842df83f54affaaaf0c1aa24240d0},
volume = {10},
year = {2022}
}
@article{KellerTesser2023,
abstract = {OS-level virtualization(containers) has become a popular alternative to hypervisor-based virtualization. From a system-administration point-of-view, containers enable support for user-defined software stacks, thus freeing users of restrictions imposed by the host's pre-configured software environment. In high performance computing (HPC), containers inspire special interest due to their potentially low overheads on performance. Moreover, they also bring benefits in portability and scientific reproducibility. Despite the potential advantages, the adoption of containers in HPC has been relatively slow, mainly due to specific requirements of the field. These requirements gave rise to various HPC-focused container implementations. Besides unprivileged container execution, they offer different degrees of automation of system-specific optimizations, which are necessary for optimal performance. When we looked into the scientific literature on containers applied to HPC, we were unable to find an up-to-date overview of the state-of-the-art. For this reason, we developed this extensive survey, including 93 carefully selected works. Overall, based on our survey, we argue that issues related to performance overhead are mostly solved. There is, however, a clear trade-off between performance and portability, since optimal performance often depends on host-specific optimizations. A few works propose solutions to mitigate this issue, but there is still room for improvement. Besides, we found surprisingly few works that deal with portability between dedicated HPC systems and public cloud platforms.},
author = {{Keller Tesser}, Rafael and Borin, Edson},
doi = {10.1007/s11227-022-04848-y},
issn = {15730484},
journal = {Journal of Supercomputing},
keywords = {Containers,HPC,High performance computing,OS-level virtualization,Parallel processing,Survey},
month = {mar},
number = {5},
pages = {5759--5827},
publisher = {Springer US},
title = {{Containers in HPC: a survey}},
url = {https://openurl-ebsco-com.crai.referencistas.com/contentitem/doi:10.1007/s11227-022-04848-y?sid=ebsco:plink:crawler&id=ebsco:doi:10.1007/s11227-022-04848-y&crl=c},
volume = {79},
year = {2023}
}
@article{Spray2023,
author = {Spray, John R},
title = {{Abstraction Layered Architecture}},
url = {http://abstractionlayeredarchitecture.com/},
year = {2023},
journal = {Abstraction Layered Architecture}
}
@inproceedings{Meena2021,
abstract = {In the era of Internet technology, Cloud Computing plays a vital role in research. The main purpose of cloud computing is to transport the resources and services on the user's demand. To run an organization successfully, it provides flexible infrastructure and easy method of handling a massive data. To improve the efficiency of cloud computing virtualization role is crucial. Firstly, this survey has studied the introduction and cloud computing evolution with fundamental properties. Section three describes the service and deployment-based models and section four shows virtualization and its approaches. Section five focuses on advantages and disadvantages of cloud computing. After all section six concludes the article.},
author = {Meena, Jitesh Kumar and {Kumar Banyal}, Rohitash},
booktitle = {Proceedings - 5th International Conference on Computing Methodologies and Communication, ICCMC 2021},
doi = {10.1109/ICCMC51019.2021.9418425},
isbn = {9781665403603},
keywords = {Bare-Metal hypervisor,Cloud Computing,Deployment Models,Hosted hypervisor,Service Models,Virtualization},
pages = {227--232},
title = {{Efficient Virtualization in Cloud Computing}},
year = {2021}
}
@article{Ries2020,
author = {Ries, Eric},
journal = {Retrieved July},
title = {{Minimum Viable Product: a guide. August 3, 2009}},
url = {http://www.startuplessonslearned.com/2009/08/minimum-viable-product-guide.html},
volume = {29},
year = {2020}
}
@misc{Wren2023,
abstract = {This graph showing AMD and Intel market share is made up of thousands of PerformanceTest benchmark results and is updated daily.},
author = {Wren, David},
booktitle = {PassMark Software},
title = {{AMD vs Intel Market Share}},
url = {https://www.cpubenchmark.net/market_share.html},
year = {2023}
}
@book{brynjolfsson2014second,
abstract = {A book review for "The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies"},
author = {Marien, Michael},
booktitle = {World Futures Review},
doi = {10.1177/1946756714541404},
isbn = {9780393239355},
issn = {1946-7567},
number = {2},
pages = {189--193},
publisher = {W. W. Norton},
series = {Business book summary},
title = {{Book Review: The Second Machine Age: Work, Progress, and Prosperity in a Time of Brilliant Technologies}},
url = {https://books.google.com.co/books?id=WiKwAgAAQBAJ},
volume = {6},
year = {2014}
}
@article{Chae2019,
abstract = {Recently, the importance of software education has been emphasized all over the world. In Korea, software education has been introduced for elementary schools that have applied for software education since 2015, and software education has been adopted as a regular subject in all elementary schools since 2017. As the importance of the software industry grows, interest in coding education is increasing. In Korea, students must complete 16 hours of instruction in elementary school and 34 hours in middle school from 2019. In Korea, however, there are not enough professional teachers who majored in software, and many schools have poor laboratory environments. For successful software coding education, a basic hands-on environment should be supported. It is also difficult for the teacher to analyze and score all students' program sources during class. In this paper, we propose a computer labs management system that can be executed within seconds by using images already generated by Docker for software education at school. And we implemented a programming practice management system using Docker. Our system provides the ability for teachers to automatically identify and score students' source code as they conduct coding training.},
author = {Chae, Minsu and Han, Sangwook and Lee, Hwamin},
doi = {10.1109/ICCSE.2019.8845470},
isbn = {9781728118444},
issn = {24739464},
journal = {14th International Conference on Computer Science and Education, ICCSE 2019},
keywords = {Docker,School Computer lab,Software Coding Education},
month = {aug},
pages = {622--626},
publisher = {IEEE},
title = {{Docker-based cloud system for computer programming labs}},
url = {https://openurl-ebsco-com.crai.referencistas.com/contentitem/doi:10.1109/ICCSE.2019.8845470?sid=ebsco:plink:crawler&id=ebsco:doi:10.1109/ICCSE.2019.8845470&crl=c},
year = {2019}
}
@misc{Mumtaza2025,
abstract = {Digital Transformation (DT) has become a strategic imperative for Small and Medium Enterprise (SME) banks, including for Bank Perekonomian Rakyat (BPRBCo) in Indonesia, which often face constraints in infrastructure, technology adoption, and regulatory compliance. While prior research has underscored the importance of DT strategy and architecture for success in large banking institutions, how these insights apply to smaller-scale banks remains underexplored. This paper develops an Enterprise Architecture (EA) blueprint for BPRBCo, an SME-scale bank, following a Design Science Research approach that encompasses problem explication, requirement specification, design and development, demonstration, and evaluation. Data was collected through semistructured interviews and triangulated with internal documents. By employing the latest best practice TOGAF Standard 10th Edition from preliminary planning to migration, the study proposes an integrated architecture featuring core banking enhancements and loan management automation. The resulting blueprint, incorporated into BPRBCo's DT Strategy, provides a replicable roadmap for aligning technology investments with business objectives. This research contributes both theoretically by extending EA discourse to smaller-scale banking contexts - and practically by offering actionable guidance for BPR-scale organizations seeking to achieve successful DT despite limited resources.},
author = {Mumtaza, Farisa Fikri and Mulyana, Rahmat and Mukti, Iqbal Yulizar},
booktitle = {ICADEIS 2025 - 2025 International Conference on Advancement in Data Science, E-learning and Information System: Integrating Data Science and Information System, Proceeding},
doi = {10.1109/ICADEIS65852.2025.10933402},
isbn = {9798331513320},
keywords = {BPR,SMEs,TOGAF,digital transformation,enterprise architecture},
month = {feb},
pages = {1--7},
publisher = {IEEE},
title = {{Utilizing TOGAF 10 to Design an Enterprise Architecture for BPRBCo SME Digital Transformation}},
url = {https://research.ebsco.com/linkprocessor/plink?id=b61bf4be-bc05-3891-aeae-de21746933bc},
year = {2025}
}
@book{CombellesC.LucenaP.2020,
abstract = {Thinking like a designer can transform the way you develop products, services, processes-and even strategy.},
address = {Chicago},
author = {{Combelles C. Lucena P.}, A Ebert},
booktitle = {IEEE Software},
isbn = {9789001752538},
issn = {9788565424004},
keywords = {Critical thinking,Design--Methodology,LANGUAGE ARTS & DISCIPLINES / Library & In,Libraries--Aims and objectives,Library administration--Decision making,Library planning,Problem solving},
language = {eng},
month = {jan},
pages = {21--24},
publisher = {ALA Neal-Schuman},
title = {{Design Thinking ( Design Thinking )}},
url = {https://library.wu.ac.th/km/design-thinking-คืออะไร-และทำไมเราต้อ/},
year = {2020}
}
@article{,
title = {{TOGAF}}
}
@article{Osorio2006,
abstract = {The objective of this study was to evaluate the effect of forage cactus pear (nopal) in diets for growing-finishing lambs on dry matter intake (DMI), total and daily liveweight gain (LWG and DLG), feed conversion (FC) and profitability (P). Fifty-four male lambs (Corriedale x Criollo) with an average liveweight of 20.2 kg (±3.2 kg) were used. Triads of lambs were formed with similar liveweight and housed in a pen (experimental unit), which were randomly allotted to the following treatments: T0% no nopal (Control), lambs were fed with a regular growing-finishing diet. T15% Nopal, cactus pear at 15% (DM basis) of the ration. T30% nopal, cactus pear at 30% (DM basis) of the ration arranged as completely randomized design with three treatments and six replicates. The diets were formulated in order to fulfill the nutritional requirements for a growing-finishing lambs according to NRC (1985). The cladodes were chopped (approximately 2.5 cm2 and mixed by hand with the diet in the feedbunk at each feeding. Lambs were fed twice a day, at 08:00 am and 4:00 pm. The experiment lasted 71 days (adaptation: 14 days, experimental period: 56 days). The inclusion of 15 or 30% cactus pear in 15 or 30% represented 55 and 75% as fed basis for T15% and T30%, respectively. Results showed that initial liveweight was similar (P>0.01) among treatments, as well as the LWG between T0% (34.54 kg) and T15% (33.95 kg), but T30% (30.71 kg) was lower (P<0.01). DMI was consistently similar (P>0.01) between T0% (0.928 kg) and T15% (0.993 kg) and higher (P<0.01) than T30% (0.615 kg). Average feed conversion was similar (P>0.01) between T0% (5.14) and T15% (5.09) but higher (P<0.01) than T30% (3.44). Lambs fed with high ratio of cactus pear (T30%) were more efficient in converting feed to LWG. The inclusion of cactus pear reduced feed cost in approximately 48 and 65% for T15% and T30%, in relation to T0%. Thus, LWG cost was reduced in about 29.1 and 64.3% in T15% and T30% in relation to T0%. The inclusion of cactus pear between 15 and 30% may represent an important alternative to feed growing-finishing lambs without affecting animal performance and reducing production costs.},
author = {Osorio, G. Aranda and {Del Real}, C. S{\'{a}}nchez and Valdez, C. A.Flores and Miranda, M. Cruz and Garay, A. Hern{\'{a}}ndez},
file = {:Users/aariaz/Downloads/nistspecialpublication800-145.pdf:pdf},
issn = {05677572},
journal = {Acta Horticulturae},
keywords = {Animal performance,Feed conversion,Feed intake,Fodder,Liveweight gain,Opuntia},
pages = {269--274},
title = {{Effect of inclusion of cactus pear cladodes in diets for growing-finishing lambs in central Mexico}},
volume = {728},
year = {2006}
}
@article{Alonso2023a,
abstract = {The evolution of Cloud Computing into a service utility, along with the pervasive adoption of the IoT paradigm, has promoted a significant growth in the need of computational and storage services. The traditional use of cloud services, focused on the consumption of one provider, is not valid anymore due to different shortcomings being the risk of vendor lock-in a critical. We are assisting to a change of paradigm, from the usage of a single cloud provider to the combination of multiple cloud service types, affecting the way in which applications are designed, developed, deployed and operated over such heterogeneous ecosystems. The result is an effective heterogeneity of architectures, methods, tools, and frameworks, copying with the multi-cloud application concept. The goal of this study is manifold. Firstly, it aims to characterize the multi-cloud concept from the application development perspective by reviewing existing definitions of multi-cloud native applications in the literature. Secondly, we set up the basis for the architectural characterization of these kind of applications. Finally, we highlight several open research issues drawn up from the analysis carried out. To achieve that, we have conducted a systematic literature review (SLR), where, a large set of primary studies published between 2011 and 2021 have been studied and classified. The in-depth analysis has revealed five main research trends for the improvement of the development and operation DevOps lifecycle of “multi-cloud native applications”. The paper finishes with directions for future work and research challenges to be addressed by the software community.},
author = {Alonso, Juncal and Orue-Echevarria, Leire and Casola, Valentina and Torre, Ana Isabel and Huarte, Maider and Osaba, Eneko and Lobo, Jesus L.},
doi = {10.1186/s13677-022-00367-6},
file = {:Users/aariaz/Downloads/s13677-022-00367-6.pdf:pdf},
issn = {2192113X},
journal = {Journal of Cloud Computing},
keywords = {Hybrid cloud,Multi-cloud native application,Software architecture,Software design,Systematic literature review},
number = {1},
pages = {6},
title = {{Understanding the challenges and novel architectural models of multi-cloud native applications – a systematic literature review}},
url = {https://doi.org/10.1186/s13677-022-00367-6},
volume = {12},
year = {2023}
}
@inproceedings{Xavier2013,
abstract = {The use of virtualization technologies in high performance computing (HPC) environments has traditionally been avoided due to their inherent performance overhead. However, with the rise of container-based virtualization implementations, such as Linux VServer, OpenVZ and Linux Containers (LXC), it is possible to obtain a very low overhead leading to near-native performance. In this work, we conducted a number of experiments in order to perform an in-depth performance evaluation of container-based virtualization for HPC. We also evaluated the trade-off between performance and isolation in container-based virtualization systems and compared them with Xen, which is a representative of the traditional hypervisor-based virtualization systems used today. {\textcopyright} 2013 IEEE.},
archivePrefix = {arXiv},
arxivId = {1709.10140},
author = {Xavier, Miguel G. and Neves, Marcelo V. and Rossi, Fabio D. and Ferreto, Tiago C. and Lange, Timoteo and {De Rose}, Cesar A.F.},
booktitle = {Proceedings of the 2013 21st Euromicro International Conference on Parallel, Distributed, and Network-Based Processing, PDP 2013},
doi = {10.1109/PDP.2013.41},
eprint = {1709.10140},
isbn = {9780769549392},
keywords = {Container-based virtualization,High performance computing,Linux containers},
pages = {233--240},
title = {{Performance evaluation of container-based virtualization for high performance computing environments}},
year = {2013}
}
@article{TARI2024100650,
abstract = {The auto-scaling feature is fundamental to serverless computing, and it automatically allows applications to scale as needed. Hence, this allows applications to be configured to adapt to current traffic and demands and acquire resources as necessary without the need to manage servers directly. Auto-scaling is an important principle in developing serverless applications that is considered and increasingly recognized by academia and industry. Despite the strong interest in auto-scaling in serverless computing in the scientific and industrial community, no clear, comprehensive, and systematic investigation has been conducted. As part of the study of automatic scaling in serverless computing, key strategies and approaches are investigated during the lifecycle of cloud applications. This research examines three key approaches to automatically scaling serverless computing applications in the taxonomy presented. These approaches include machine learning (ML)-based, frameworks-based, and models-based. Additionally, we provide an overview of key performance metrics essential to the auto-scaling process of cloud applications and discuss the requirements. It discusses key concepts and limitations of serverless computing approaches, challenges, future directions, and research opportunities.},
author = {Tari, Mohammad and Ghobaei-Arani, Mostafa and Pouramini, Jafar and Ghorbian, Mohsen},
doi = {10.1016/j.cosrev.2024.100650},
issn = {15740137},
journal = {Computer Science Review},
keywords = {Auto-scaling,Elasticity,Performance evaluation,Resource management,Resource provisioning,Serverless computing},
pages = {100650},
title = {{Auto-scaling mechanisms in serverless computing: A comprehensive review}},
url = {https://www.sciencedirect.com/science/article/pii/S1574013724000340},
volume = {53},
year = {2024}
}
@misc{CNCF2021,
author = {CNCF},
title = {{CNCF Sees Record Kubernetes and Container Adoption in 2021 Cloud Native Survey | Cloud Native Computing Foundation}},
url = {https://www.cncf.io/announcements/2022/02/10/cncf-sees-record-kubernetes-and-container-adoption-in-2021-cloud-native-survey/},
year = {2021}
}
@misc{Ganley2022,
author = {Ganley, Bob},
booktitle = {Dell blog},
title = {{Container Adoption Trends: Why, How and Where | Dell USA}},
url = {https://www.dell.com/en-us/blog/container-adoption-trends-why-how-and-where/},
year = {2022}
}
@article{Mell2011,
abstract = {Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model is composed of five essential characteristics, three service models, and four deployment models.},
author = {Mell, Peter;Timothy Grance},
journal = {National institute of standart and technology},
title = {{The NIST Definition of Cloud Computing}},
url = {https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-145.pdf},
year = {2011}
}
@misc{OurWorldinData2023,
author = {{Our World in Data}},
booktitle = {Our World in Data},
title = {{Historical price of computer memory and storage}},
url = {https://ourworldindata.org/grapher/historical-cost-of-computer-memory-and-storage},
year = {2023}
}
@article{Size2024,
author = {Size, Polyurethane Market and Di-isocyanate, Methylene Diphenyl and Product, By and Application, By and Forecasts, Segment},
file = {:Users/aariaz/Downloads/Cloud Computing Market Size, Share & Growth Report, 2030.pdf:pdf},
isbn = {9781680382624},
pages = {1--12},
title = {{Polyurethane Market Size & Trends Market Concentration & Characteristics}},
year = {2024}
}
@article{Kaiser2023,
abstract = {Internet-of-Things (IoT) devices continuously gather data and send the data to the cloud for further processing. However, with the recent trend of increasing number of IoT devices, billions of devices are anticipated to send data to the cloud, eventually impacting performance and cost. To solve this problem, one way is to process data locally inside edge nodes. The edge nodes are closer to the IoT devices and improve the overall performance of the system by distributing cloud tasks in edge devices. Edge devices are generally resource-constrained with limited RAM, CPU, and storage. Container technologies are ideal in edge nodes due to their isolation and being lightweight. A benchmarking scheme for containers on edge devices can help compare container technologies, hardware devices and architectures, and software. However, there is not sufficient research in this direction. So, in this work, we take a step towards developing this benchmark. We explore and evaluate the performance, efficiency, and suitability of different container technologies, including Docker, Podman, and Singularity, in the context of edge computing on ARM-based devices. Our experiments include evaluating computer vision applications that employ Haar Cascades, HOG, CNN with YOLO algorithm, and data science workloads commonly encountered in edge computing scenarios. We devised sets of performance metrics to assess container technology, including waiting time, receiving time, processing time, resource utilization, and throughput. Besides, we investigate how different container technologies optimize resource utilization and compare their efficiency on ARM-based edge devices. Our benchmarking analysis yielded valuable insights into the strengths and limitations of each container technology. Our results reveal that Docker, Podman, and Singularity containers exhibit diverse resource consumption patterns and network efficiency. Docker container has better CPU and RAM utilization for most applications. Docker also boasts the lowest waiting time of approximately 0.9 seconds, comparable to native performance. In terms of processing time, Docker excels in Car detection (0.12 seconds), while Singularity and Podman outperform Docker in Object detection. Notably, native systems exhibit a remarkable improvement over containers (average of 1.2 seconds) in Object detection (0.98 seconds), highlighting the challenges of resource-intensive deep neural network algorithms on edge devices. Based on our findings, we offer practical advice for picking the best container technology for specific use cases in ARM-based edge computing. We also offer a set of benchmarking approaches and metrics that can be used to drive future research on container technologies on ARM platforms.},
author = {Kaiser, Shahidullah and Tosun, Ali Saman and Korkmaz, Turgay},
doi = {10.1109/ACCESS.2023.3321274},
file = {::},
issn = {2169-3536},
journal = {IEEE Access},
keywords = {Docker,Edge computing,Internet of Things (IoT),Podman,benchmark,computer vision,container,data science,singularity},
month = {jan},
pages = {107331--107347},
publisher = {IEEE},
title = {{Benchmarking Container Technologies on ARM-Based Edge Devices}},
url = {https://doaj.org/article/2033f2041344497d9369c7846d31d01e},
volume = {11},
year = {2023}
}
@misc{PeterWootton2024,
abstract = {Benchmarking determines where the enterprise is in relation to performing activities with "best-of-breed" or world-class companies. It measures the performance or the degree of success that has been realized in comparison to other companies for a given activity, value stream, or other factors of interest. These measures then become the basis for analysis and redesign.},
author = {{Peter Wootton}},
booktitle = {Project Management Journal},
title = {{Benchmarking}},
url = {https://www.projectmanagement.com/wikis/233027/benchmarking#_},
urldate = {2025-05-08},
year = {2024}
}
@misc{Collins2016,
abstract = {Applications can range from Microso applications to industry-specic, proprietary applications. Because the application is running from a server in the cloud, any type of device can be used (e.g., iPad). Various devices are compatible running applications through the cloud, which would not ordinarily support an application when it is locally installed. Aer connecting securely, usually a virtual private network, a device can either utilize a remote desktop connection or a shortcut pointing to the application housed on the cloud server. Each user will only be able to view and access les and applications they have permissions for. When data are securely stored in the cloud, accessible from anywhere will give businesses a strategic advantage.},
author = {Collins, Lauren},
booktitle = {Security in the Private Cloud},
doi = {10.1201/9781315372211-19},
isbn = {9781482259568},
pages = {113--140},
title = {{Virtual Private Cloud}},
url = {https://www.sciencedirect.com/topics/computer-science/virtual-private-cloud},
year = {2016}
}
@misc{Monday2022,
author = {Monday},
title = {{The PMBOK and How It's Used in Project Management}},
url = {https://monday.com/blog/project-management/project-management-body-of-knowledge-pmbok/},
year = {2022}
}
@misc{CNCF2019,
author = {CNCF},
mendeley-groups = {FASE 3},
title = {{CNCF to host CRI-O}},
url = {https://www.cncf.io/blog/2019/04/08/cncf-to-host-cri-o/},
year = {2019}
}
@article{Watada2019,
author = {Watada, J and Roy, A and Kadikar, R and Pham, H and Xu, B},
doi = {10.1109/ACCESS.2019.2945930},
file = {:Users/aariaz/Downloads/EmergingTrendsTechniquesandOpenIssuesofContainerizationAReview.pdf:pdf},
issn = {2169-3536 VO  - 7},
journal = {IEEE Access},
mendeley-groups = {FASE 3},
pages = {152443--152472},
title = {{Emerging Trends, Techniques and Open Issues of Containerization: A Review}},
volume = {7},
year = {2019}
}
@misc{Smith2016,
author = {Smith, Russell},
mendeley-groups = {FASE 3},
title = {{Sponsored: Securing Windows Containers with Hyper-V}},
url = {https://petri.com/sponsored-securing-windows-containers-hyper-v/},
year = {2016}
}
@misc{Clark2024,
author = {Clark, Scott},
mendeley-groups = {FASE 3},
title = {{How Does Microsoft's Contact Center Play Shake up the Industry?}},
url = {https://www.cmswire.com/contact-center/how-does-microsofts-contact-center-play-shake-up-the-industry/},
year = {2024}
}
@inproceedings{151962df5f7e4b9faba0629540c11439,
abstract = {The co-location of containers on the same host leads to significant performance concerns in the multi-tenant environment such as the cloud. These concerns are raised due to an attempt to maximize host resource utilization by increasing the number of containers running on the same host. The selection of a container runtime becomes critical in the case of strict performance requirements. In the scope of the study, two commonly used runtimes were evaluated: containerd (industry standard) and CRI-O (reference implementation of the CRI) on two different Open Container Initiative (OCI) runtimes: runc (default for most container runtimes) and gVisor (highly secure alternative to runc). Evaluation aspects of container runtimes include the performance of running containers, the performance of container runtime operations, and scalability. A tool called Touch- Stone was developed to address these evaluation aspects. The tool uses the CRI standard and is pluggable into any Kubernetes-compatible container runtime. Performance results demonstrate the better performance of containerd in terms of CPU usage, memory latency and scalability aspects, whereas file system operations (in particular, write operations) are performed more efficiently by CRI-O.},
annote = {Publisher Copyright: {\textcopyright}Copyright 2020 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.; 10th International Conference on Cloud Computing and Services Science, CLOSER 2020 ; Conference date: 07-05-2020 Through 09-05-2020},
author = {Espe, Lennart and Jindal, Anshul and Podolskiy, Vladimir and Gerndt, Michael},
booktitle = {CLOSER 2020 - Proceedings of the 10th International Conference on Cloud Computing and Services Science},
editor = {Ferguson, Donald and Helfert, Markus and Pahl, Claus},
file = {:Users/aariaz/Downloads/93404.pdf:pdf},
keywords = {Benchmarking for Container Runtimes,Cloud Computing,Container Runtime,Containers,OCI Runtime,Performance Evaluation,Resource Management},
mendeley-groups = {FASE 3},
pages = {273--281},
publisher = {SciTePress},
series = {CLOSER 2020 - Proceedings of the 10th International Conference on Cloud Computing and Services Science},
title = {{Performance evaluation of container runtimes}},
year = {2020}
}
@article{Jangda2019,
abstract = {All major web browsers now support WebAssembly, a low-level bytecode intended to serve as a compilation target for code written in languages like C and C++. A key goal of WebAssembly is performance parity with native code; previous work reports near parity, with many applications compiled to WebAssembly running on average 10% slower than native code. However, this evaluation was limited to a suite of scientific kernels, each consisting of roughly 100 lines of code. Running more substantial applications was not possible because compiling code to WebAssembly is only part of the puzzle: standard Unix APIs are not available in the web browser environment. To address this challenge, we build BROWSIX-WASM, a significant extension to BROWSIX [29] that, for the first time, makes it possible to run unmodified WebAssembly-compiled Unix applications directly inside the browser. We then use BROWSIX-WASM to conduct the first large-scale evaluation of the performance of WebAssembly vs. native. Across the SPEC CPU suite of benchmarks, we find a substantial performance gap: applications compiled to WebAssembly run slower by an average of 45% (Firefox) to 55% (Chrome), with peak slowdowns of 2.08× (Firefox) and 2.5× (Chrome). We identify the causes of this performance degradation, some of which are due to missing optimizations and code generation issues, while others are inherent to the WebAssembly platform.},
archivePrefix = {arXiv},
arxivId = {1901.09056},
author = {Jangda, Abhinav and Powers, Bobby and Berger, Emery D. and Guha, Arjun},
doi = {10.5555/3358807.3358817},
eprint = {1901.09056},
file = {:Users/aariaz/Downloads/atc19-jangda.pdf:pdf},
isbn = {9781939133038},
journal = {Proceedings of the 2019 USENIX Annual Technical Conference, USENIX ATC 2019},
mendeley-groups = {FASE 3},
pages = {107--120},
title = {{Not so fast: Analyzing the performance of webassembly vs. Native code}},
url = {https://doi.org/10.5555/3358807.3358817},
year = {2019}
}
@article{Jain,
archivePrefix = {arXiv},
arxivId = {arXiv:2005.12821v1},
author = {Jain, Madhur},
eprint = {arXiv:2005.12821v1},
file = {:Users/aariaz/Downloads/2005.12821v1.pdf:pdf},
mendeley-groups = {FASE 3},
title = {{Study of Firecracker MicroVM}},
year = {2020},
journal = {arXiv:2005.12821 [cs]}
}
@inproceedings{246288,
address = {Santa Clara, CA},
author = {Agache, Alexandru and Brooker, Marc and Iordache, Alexandra and Liguori, Anthony and Neugebauer, Rolf and Piwonka, Phil and Popa, Diana-Maria},
booktitle = {17th USENIX Symposium on Networked Systems Design and Implementation (NSDI 20)},
isbn = {978-1-939133-13-7},
mendeley-groups = {FASE 3},
month = {feb},
pages = {419--434},
publisher = {USENIX Association},
title = {{Firecracker: Lightweight Virtualization for Serverless Applications}},
url = {https://www.usenix.org/conference/nsdi20/presentation/agache},
year = {2020}
}
@article{VS2023103490,
abstract = {The enterprise technique for application deployment has undergone a major transformation during the past two decades. Using conventional techniques, software developers write code in a particular computing environment, frequently leading to mistakes and defects when moving it to a new computing environment. However, during the past few years, enterprises have begun to use containers & microservices to segregate infrastructure in a particular perspective and develop new models of the technology stack. Software developers could construct and deploy apps more quickly and effectively now, thanks to containerization. Despite the fact that containers have their own namespace, it is still feasible for a containerized image to attack the host system by inserting malicious software into it. This necessitates threat modeling of the container life span. During the investigation, we were able to create the elemental systematic modelling that identifies threats pertaining to container application workflow and its preliminary mitigation techniques, where attack trees are defined alongside the model, which helps academics and enthusiasts better comprehend the significance of container security. We utilize the well-known threat modeling framework, DREAD, to further advance threat modeling across the infrastructure of containers that aids in prioritizing the risks. Additionally, tools for assessing container vulnerabilities and discrete real-world exploits were researched, and approaches for security analysis in container technology were compared to the existing literature. Finally, this study brings to a conclusion by outlining the state-of-the-art survey for future research and identifying potential research topics in server-based and serverless containers.},
author = {{V S}, Devi Priya and {Chakkaravarthy Sethuraman}, Sibi and Khan, Muhammad Khurram},
doi = {10.1016/j.cose.2023.103490},
issn = {01674048},
journal = {Computers and Security},
keywords = {Container security- root-based and rootless,DREAD,Microservices,Software development,Threat modeling-attack trees},
mendeley-groups = {SMS/SNOWBALL/Forward-1,FASE 3},
pages = {103490},
title = {{Container security: Precaution levels, mitigation strategies, and research perspectives}},
url = {https://www.sciencedirect.com/science/article/pii/S0167404823004005},
volume = {135},
year = {2023}
}
@article{Gvisor2025,
author = {Gvisor},
mendeley-groups = {FASE 3},
title = {{The Container Security Platform | gVisor}},
url = {https://gvisor.dev/},
year = {2025}
}
@article{LopezFalcon2024,
author = {{Lopez Falcon}, Gerardo},
mendeley-groups = {FASE 3},
title = {{Por qu{\'{e}} las Empresas y Desarrolladores Deber{\'{i}}an Adoptar Tecnolog{\'{i}}as como gVisor para Aumentar la Seguridad de sus Contenedores}},
url = {https://www.cncf.io/blog/2024/09/19/por-que-las-empresas-y-desarrolladores-deberian-adoptar-tecnologias-como-gvisor-para-aumentar-la-seguridad-de-sus-contenedores/},
year = {2024},
journal = {CNCF Blog}
}
@article{Viktorsson2020,
abstract = {The extreme adoption rate of container technologies along with raised security concerns have resulted in the development of multiple alternative container runtimes targeting security through additional layers of indirection. In an apples-to-apples comparison, we deploy three runtimes in the same Kubernetes cluster, the security focused Kata and gVisor, as well as the default Kubernetes runtime runC. Our evaluation based on three real applications demonstrate that runC outperforms the more secure alternatives up to 5x, that gVisor deploys containers up to 2x faster than Kata, but that Kata executes container up to 1.6x faster than gVisor. Our work illustrates that alternative, more secure, runtimes can be used in a plug-and-play manner in Kubernetes, but at a significant performance penalty. Our study is useful both to practitioners - to understand the current state of the technology in order to make the right decision in the selection, operation and/or design of platforms - and to scholars to illustrate how these technologies evolved over time.},
author = {Viktorsson, William and Klein, Cristian and Tordsson, Johan},
doi = {10.1109/MASCOTS50786.2020.9285946},
file = {:Users/aariaz/Downloads/SecurityPerformanceTradeoffsKubernetesContainerRuntimes.pdf:pdf},
isbn = {9781728192383},
issn = {15267539},
journal = {Proceedings - IEEE Computer Society's Annual International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunications Systems, MASCOTS},
mendeley-groups = {FASE 3},
number = {November},
title = {{Security-Performance Trade-offs of Kubernetes Container Runtimes}},
volume = {2020-Novem},
year = {2020}
}
@misc{LinuxVirt2017,
author = {LinuxVirt},
mendeley-groups = {FASE 3},
title = {{The Linux-VServer approach}},
url = {https://virt.kernelnewbies.org/Linux-VServer},
year = {2017}
}
@inproceedings{10.1145/1272998.1273025,
abstract = {Hypervisors, popularized by Xen and VMware, are quickly becoming commodity. They are appropriate for many usage scenarios, but there are scenarios that require system virtualization with high degrees of both isolation and efficiency. Examples include HPC clusters, the Grid, hosting centers, and PlanetLab. We present an alternative to hypervisors that is better suited to such scenarios. The approach is a synthesis of prior work on resource containers and security containers applied to general-purpose, time-shared operating systems. Examples of such container-based systems include Solaris 10, Virtuozzo for Linux, and Linux-VServer. As a representative instance of container-based systems, this paper describes the design and implementation of Linux-VServer. In addition, it contrasts the architecture of Linux-VServer with current generations of Xen, and shows how Linux-VServer provides comparable support for isolation and superior system efficiency.},
address = {New York, NY, USA},
author = {Soltesz, Stephen and P{\"{o}}tzl, Herbert and Fiuczynski, Marc E and Bavier, Andy and Peterson, Larry},
booktitle = {Proceedings of the 2nd ACM SIGOPS/EuroSys European Conference on Computer Systems 2007},
doi = {10.1145/1272998.1273025},
isbn = {9781595936363},
issn = {0163-5980},
keywords = {Linux-VServer,Xen,alternative,container,hypervisor,operating,system,virtualization},
mendeley-groups = {FASE 3},
month = {mar},
number = {3},
pages = {275--287},
publisher = {Association for Computing Machinery},
series = {EuroSys '07},
title = {{Container-based operating system virtualization: a scalable, high-performance alternative to hypervisors}},
url = {https://doi.org/10.1145/1272998.1273025 https://doi.org/10.1145/1272996.1273025},
volume = {41},
year = {2007}
}
@misc{Campos2017,
author = {Campos, Isabel and Gomes, Jorge},
mendeley-groups = {FASE 3},
title = {{Researchers Advance User-Level Container Solution for HPC}},
url = {https://www.hpcwire.com/2017/12/18/researchers-advance-user-level-container-solution-hpc/},
year = {2017}
}
@article{Haas2017,
abstract = {The maturation of the Web platform has given rise to sophisticated and demanding Web applications such as interactive 3D visualization, audio and video software, and games. With that, efficiency and security of code on the Web has become more important than ever. Yet JavaScript as the only built-in language of the Web is not well-equipped to meet these requirements, especially as a compilation target. Engineers from the four major browser vendors have risen to the challenge and collaboratively designed a portable low-level bytecode called WebAssembly. It offers compact representation, efficient validation and compilation, and safe low to no-overhead execution. Rather than committing to a specific programming model, WebAssembly is an abstraction over modern hardware, making it language-, hardware-, and platform-independent, with use cases beyond just the Web. WebAssembly has been designed with a formal semantics from the start. We describe the motivation, design and formal semantics of WebAssembly and provide some preliminary experience with implementations.},
author = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, J. F.},
doi = {10.1145/3062341.3062363},
file = {:Users/aariaz/Downloads/3062341.3062363.pdf:pdf},
isbn = {9781450349888},
issn = {15232867},
journal = {ACM SIGPLAN Notices},
keywords = {assembly languages,just-in-time compilers,programming languages,type systems,virtual machines},
mendeley-groups = {FASE 3},
number = {6},
pages = {185--200},
title = {{Bringing the web up to speed with WebAssembly}},
volume = {52},
year = {2017}
}
@misc{Surendhar2024,
author = {Surendhar, Metta},
mendeley-groups = {FASE 3},
title = {{Exploring Podman and Beyond: Open Source Alternatives to Docker for Secure Containerization}},
url = {https://dev.to/mettasurendhar/exploring-podman-and-beyond-open-source-alternatives-to-docker-for-secure-containerization-59kd},
year = {2024}
}
@article{Gomes2018,
abstract = {Containers are increasingly used as means to distribute and run Linux services and applications. In this paper we describe the architectural design and implementation of udocker, a tool which enables the user to execute Linux containers in user mode. We also present a few practical applications, using a range of scientific codes characterized by different requirements: from single core execution to MPI parallel execution and execution on GPGPUs.},
archivePrefix = {arXiv},
arxivId = {1711.01758},
author = {Gomes, Jorge and Bagnaschi, Emanuele and Campos, Isabel and David, Mario and Alves, Lu{\'{i}}s and Martins, Jo{\~{a}}o and Pina, Jo{\~{a}}o and L{\'{o}}pez-Garc{\'{i}}a, Alvaro and Orviz, Pablo},
doi = {10.1016/j.cpc.2018.05.021},
eprint = {1711.01758},
file = {:Users/aariaz/Downloads/udockertool.pdf:pdf},
issn = {00104655},
journal = {Computer Physics Communications},
keywords = {Biophysics,HPC on cloud,Linux containers,Phenomenology,QCD,Virtualization},
mendeley-groups = {FASE 3},
pages = {84--97},
title = {{Enabling rootless Linux Containers in multi-user environments: The udocker tool}},
volume = {232},
year = {2018}
}
@misc{Hill2025,
abstract = {Before Docker's introduction, containers (process isolation) were a concept that had been around for some time, particularly in the Linux ecosystem. Linux containers use kernel features like cgroups (control groups) and namespaces to manage system resources and provide process isolation. However, container management often required a deep understanding of Linux internals and command-line tools. Technologies like Linux Containers provided the foundational capabilities but needed to be more user-friendly, making it difficult for developers without extensive system administration experience to leverage them effectively. As a result, container technology adoption was greatly accelerated when Docker introduced an open-sourced Docker Engine in 2013. Docker Engine set a new standard for container use with easy tools for developers and defined a universal approach for how containers should be packaged.},
author = {Hill, Justin},
mendeley-groups = {FASE 3},
title = {{Docker}},
url = {https://research.contrary.com/company/docker},
year = {2025}
}
@misc{Mag2025,
author = {Mag, Academia},
mendeley-groups = {FASE 3},
title = {{How Docker is Revolutionizing DevOps and Cloud Computing}},
url = {https://academiamag.com/career-guides/how-docker-is-revolutionizing-devops-cloud-comp/},
year = {2025}
}
@misc{Trevor2022,
author = {Trevor, Bryant and Walker, Samuel},
mendeley-groups = {FASE 3},
title = {{Enhancing application container security and compliance with Podman}},
url = {https://www.redhat.com/en/blog/enhancing-application-container-security-and-compliance-podman},
year = {2022}
}
@misc{Sarus2021,
author = {Sarus},
mendeley-groups = {FASE 3},
title = {{Sarus}},
url = {https://sarus.readthedocs.io/en/1.3.3/overview/overview.html},
year = {2021}
}
@book{B2020,
author = {B, Lucas Benedicic and Cruz, Felipe A and Madonna, Alberto and Mariotti, Kean},
doi = {10.1007/978-3-030-34356-9},
file = {:Users/aariaz/Downloads/978-3-030-34356-9_5.pdf:pdf},
isbn = {9783030343569},
mendeley-groups = {FASE 3},
pages = {46--60},
publisher = {Springer International Publishing},
title = {{Sarus : Highly Scalable Docker Containers for HPC Systems}},
url = {http://dx.doi.org/10.1007/978-3-030-34356-9_5},
year = {2020}
}
@misc{Perez2005,
author = {Perez, Ernest},
booktitle = {Online (Wilton, Connecticut)},
issn = {01465422},
mendeley-groups = {FASE 3},
number = {1},
pages = {28--32},
title = {{dtSearch: The little search engine that could}},
url = {https://opensource.com/life/16/8/runc-little-container-engine-could},
volume = {29},
year = {2005}
}
@article{Kurtzer2017,
abstract = {Here we present Singularity, software developed to bring containers and reproducibility to scientific computing. Using Singularity containers, developers can work in reproducible environments of their choosing and design, and these complete environments can easily be copied and executed on other platforms. Singularity is an open source initiative that harnesses the expertise of system and software engineers and researchers alike, and integrates seamlessly into common workflows for both of these groups. As its primary use case, Singularity brings mobility of computing to both users and HPC centers, providing a secure means to capture and distribute software and compute environments. This ability to create and deploy reproducible environments across these centers, a previously unmet need, makes Singularity a game changing development for computational science.},
author = {Kurtzer, Gregory M. and Sochat, Vanessa and Bauer, Michael W.},
doi = {10.1371/journal.pone.0177459},
file = {:Users/aariaz/Downloads/pone.0177459.pdf:pdf},
isbn = {1111111111},
issn = {19326203},
journal = {PLoS ONE},
mendeley-groups = {FASE 3},
number = {5},
pages = {1--20},
pmid = {28494014},
title = {{Singularity: Scientific containers for mobility of compute}},
volume = {12},
year = {2017}
}
@inproceedings{10.1145/3332186.3332192,
abstract = {Container technology makes it easy to create highly portable and reproducible research environments. The Singularity container platform has a unique security model allowing untrusted users to run untrusted containers safely on multi-tenant systems. Singularity has a special file format (called the Singularity Image Format or SIF) for packaging and distributing containers. This format allows for novel features like cryptographic signing and verification of containers, extreme portability, and guaranteed reproducibility. The Singularity runtime supports both integration as well as isolation, making it easy to read and write data to the host system, leverage hardware like GPUs and high-speed interconnects, and integrate with batch schedulers like Slurm, PBS, LSF, UGE, etc. This emphasis on integration is part of the overall development philosophy: Singularity is intended to be a simple, secure, feature-rich container solution. Sylabs Inc. has developed SingularityPRO, a professionally curated and supported version of the open source offering as well as the Singularity Container Services, an end-to-end cloud hosted solution for creating and distributing trusted containers. Most top HPC centers use Singularity in production, and enterprise users are rapidly adopting this solution as well.},
address = {New York, NY, USA},
author = {Godlove, David},
booktitle = {Practice and Experience in Advanced Research Computing 2019: Rise of the Machines (Learning)},
doi = {10.1145/3332186.3332192},
isbn = {9781450372275},
keywords = {Kubernetes,Linux containers,cloud native,reproducible science},
mendeley-groups = {FASE 3},
publisher = {Association for Computing Machinery},
series = {PEARC '19},
title = {{Singularity: Simple, secure containers for compute-driven workloads}},
url = {https://doi.org/10.1145/3332186.3332192},
year = {2019}
}
@article{Zhou2021,
abstract = {Containerisation demonstrates its efficiency in application deployment in Cloud Computing. Containers can encapsulate complex programs with their dependencies in isolated environments making applications more portable, hence are being adopted in High Performance Computing (HPC) clusters. Singularity, initially designed for HPC systems, has become their de facto standard container runtime. Nevertheless, conventional HPC workload managers lack micro-service support and deeply-integrated container management, as opposed to container orchestrators. We introduce a Torque-Operator which serves as a bridge between HPC workload manager (TORQUE) and container orchestrator (Kubernetes). We propose a hybrid architecture that integrates HPC and Cloud clusters seamlessly with little interference to HPC systems where container orchestration is performed on two levels.},
author = {Zhou, Naweiluo and Georgiou, Yiannis and Pospieszny, Marcin and Zhong, Li and Zhou, Huan and Niethammer, Christoph and Pejak, Branislav and Marko, Oskar and Hoppe, Dennis},
doi = {10.1186/s13677-021-00231-z},
file = {:Users/aariaz/Downloads/s13677-021-00231-z.pdf:pdf},
isbn = {1367702100},
issn = {2192113X},
journal = {Journal of Cloud Computing},
keywords = {Cloud computing,Container orchestration,HPC workload manager,Kubernetes,Singularity,TORQUE},
mendeley-groups = {FASE 3},
number = {1},
publisher = {Journal of Cloud Computing: Advances, Systems and Applications},
title = {{Container orchestration on HPC systems through Kubernetes}},
volume = {10},
year = {2021}
}
@article{Vano2023,
abstract = {Cloud-native computing principles such as virtualization and orchestration are key to transferring to the promising paradigm of edge computing. Challenges of containerization, operative models and scarce availability of established tools make a thorough review indispensable. Therefore, the authors have described the practical methods and tools found in the literature as well as in current community-led development projects, and have thoroughly exposed the future directions of the field. Container virtualization and its orchestration through Kubernetes have dominated the cloud computing domain, while major efforts have been recently recorded focused on the adaptation of these technologies to the edge. Such initiatives have addressed either the reduction of container engines and the development of specific tailored operating systems or the development of smaller K8s distributions and edge-focused adaptations (such as KubeEdge). Finally, new workload virtualization approaches, such as WebAssembly modules together with the joint orchestration of these heterogeneous workloads, seem to be the topics to pay attention to in the short to medium term.},
author = {Va{\~{n}}o, Rafael and Lacalle, Ignacio and Sowi{\'{n}}ski, Piotr and S-Juli{\'{a}}n, Ra{\'{u}}l and Palau, Carlos E.},
doi = {10.3390/s23042215},
file = {:Users/aariaz/Downloads/Cloud-Native_Workload_Orchestration_at_the_Edge_A_.pdf:pdf},
issn = {14248220},
journal = {Sensors},
keywords = {Kubernetes,Unikernel,WebAssembly,cloud computing,cloud-native,container,edge computing,edge-native,edge-to-cloud computing continuum,microVM},
mendeley-groups = {FASE 3},
number = {4},
pmid = {36850813},
title = {{Cloud-Native Workload Orchestration at the Edge: A Deployment Review and Future Directions}},
volume = {23},
year = {2023}
}
@article{Silva2024,
abstract = {Traditional hypervisor-assisted virtualization is a leading virtualization technology in data centers, providing cost savings (CapEx and OpEx), high availability, and disaster recovery. However, its inherent overhead may hinder performance and seems not scale or be flexible enough for certain applications, such as microservices, where deploying an application using a virtual machine is a longer and resource-intensive process. Container-based virtualization has received attention, especially with Docker, as an alternative, which also facilitates continuous integration/continuous deployment (CI/CD). Meanwhile, LXD has reactivated the interest in Linux LXC containers, which provides unique operations, including live migration and full OS emulation. A careful analysis of both options is crucial for organizations to decide which best suits their needs. This study revisits key concepts about containers, exposes the advantages and limitations of each container technology, and provides an up-to-date performance comparison between both types of containers (applicational vs. system). Using extensive benchmarks and well-known workload metrics such as CPU scores, disk speed, and network throughput, we assess their performance and quantify their virtualization overhead. Our results show a clear overall trend toward meritorious performance and the maturity of both technologies (Docker and LXD), with low overhead and scalable performance. Notably, LXD shows greater stability with consistent performance variability.},
author = {Silva, Daniel and Rafael, Jo{\~{a}}o and Fonte, Alexandre},
doi = {10.3390/computers13040094},
file = {:Users/aariaz/Downloads/computers-13-00094.pdf:pdf},
issn = {2073431X},
journal = {Computers},
keywords = {Docker,LXC,LXD,containers},
mendeley-groups = {FASE 3},
number = {4},
title = {{Toward Optimal Virtualization: An Updated Comparative Analysis of Docker and LXD Container Technologies}},
volume = {13},
year = {2024}
}
@article{Lingayat2018,
abstract = {In cloud computing, sharing of resources is supported using heavy weighted traditional virtualization techniques. Such techniques involve hypervisors to emulate hardware for creating virtual machines. The inclusion of an additional layer of hypervisor over host operating system depreciates the performance of the virtual machine. Recent evolution is a lightweight alternative to the virtual machine called containers which have gained popularity among developers and administrators. Container Based virtualization has proven very efficient regarding performance, and many industries are now migrating their virtualized environment to run on Linux containers. Containers use host operating systems kernel and isolate each container by encapsulating them with their required services and packages. Linux kernel is very beneficial in implementing containers, which is the reason for the existence of Linux containers. Linux containers utilize less storage space and consume optimal computational power, giving a hike in performance. Having them integrated into the cloud surely benefits consumer and cloud provider. Many projects have extended their support in incorporating containers in the cloud. In this paper, we will discuss various Linux containers and their management tools along with cloud computing software, OpenStack, including projects undertaken by OpenStack for integrating containers in the cloud.},
author = {Lingayat, Ashish and Badre, Ranjana R. and Gupta, Anil Kumar},
doi = {10.11591/ijeecs.v12.i3.pp1094-1105},
file = {:Users/aariaz/Downloads/12434-27395-1-PB.pdf:pdf},
issn = {25024760},
journal = {Indonesian Journal of Electrical Engineering and Computer Science},
keywords = {Cloud computing,Container orchestration,Linux containers,Open stack},
mendeley-groups = {FASE 3},
number = {3},
pages = {1094--1105},
title = {{Integration of linux containers in openstack: An introspection}},
volume = {12},
year = {2018}
}
@article{10.1145/1272998.1273025,
abstract = {Hypervisors, popularized by Xen and VMware, are quickly becoming commodity. They are appropriate for many usage scenarios, but there are scenarios that require system virtualization with high degrees of both isolation and efficiency. Examples include HPC clusters, the Grid, hosting centers, and PlanetLab. We present an alternative to hypervisors that is better suited to such scenarios. The approach is a synthesis of prior work on resource containers and security containers applied to general-purpose, time-shared operating systems. Examples of such container-based systems include Solaris 10, Virtuozzo for Linux, and Linux-VServer. As a representative instance of container-based systems, this paper describes the design and implementation of Linux-VServer. In addition, it contrasts the architecture of Linux-VServer with current generations of Xen, and shows how Linux-VServer provides comparable support for isolation and superior system efficiency.},
address = {New York, NY, USA},
author = {Soltesz, Stephen and P{\"{o}}tzl, Herbert and Fiuczynski, Marc E and Bavier, Andy and Peterson, Larry},
doi = {10.1145/1272998.1273025},
issn = {0163-5980},
journal = {SIGOPS Oper. Syst. Rev.},
keywords = {Linux-VServer,Xen,alternative,container,hypervisor,operating,system,virtualization},
mendeley-groups = {FASE 3},
month = {mar},
number = {3},
pages = {275--287},
publisher = {Association for Computing Machinery},
title = {{Container-based operating system virtualization: a scalable, high-performance alternative to hypervisors}},
url = {https://doi.org/10.1145/1272998.1273025},
volume = {41},
year = {2007}
}
@misc{OpenVZ2015,
author = {OpenVZ},
mendeley-groups = {FASE 3},
title = {{OpenVZ Philosophy}},
url = {https://wiki.openvz.org/User_Guide/OpenVZ_Philosophy},
year = {2015}
}
@inproceedings{10.1145/1272996.1273025,
abstract = {Hypervisors, popularized by Xen and VMware, are quickly becoming commodity. They are appropriate for many usage scenarios, but there are scenarios that require system virtualization with high degrees of both isolation and efficiency. Examples include HPC clusters, the Grid, hosting centers, and PlanetLab. We present an alternative to hypervisors that is better suited to such scenarios. The approach is a synthesis of prior work on resource containers and security containers applied to general-purpose, time-shared operating systems. Examples of such container-based systems include Solaris 10, Virtuozzo for Linux, and Linux-VServer. As a representative instance of container-based systems, this paper describes the design and implementation of Linux-VServer. In addition, it contrasts the architecture of Linux-VServer with current generations of Xen, and shows how Linux-VServer provides comparable support for isolation and superior system efficiency.},
address = {New York, NY, USA},
author = {Soltesz, Stephen and P{\"{o}}tzl, Herbert and Fiuczynski, Marc E and Bavier, Andy and Peterson, Larry},
booktitle = {Proceedings of the 2nd ACM SIGOPS/EuroSys European Conference on Computer Systems 2007},
doi = {10.1145/1272996.1273025},
isbn = {9781595936363},
keywords = {Linux-VServer,Xen,alternative,container,hypervisor,operating,system,virtualization},
mendeley-groups = {FASE 3},
pages = {275--287},
publisher = {Association for Computing Machinery},
series = {EuroSys '07},
title = {{Container-based operating system virtualization: a scalable, high-performance alternative to hypervisors}},
url = {https://doi.org/10.1145/1272996.1273025},
year = {2007}
}
@article{Simon2023,
abstract = {In the current era of prevailing information technology, the requirement for high availability and reliability of various types of services is critical. This paper focusses on the comparison and analysis of different high-availability solutions for Linux container environments. The objective was to identify the strengths and weaknesses of each solution and to determine the optimal container approach for common use cases. Through a series of structured experiments, basic performance metrics were collected, including average service recovery time, average transfer rate, and total number of failed calls. The container platforms tested included Docker, Kubernetes, and Proxmox. On the basis of a comprehensive evaluation, it can be concluded that Docker with Docker Swarm is generally the most effective high-availability solution for commonly used Linux containers. Nevertheless, there are specific scenarios in which Proxmox stands out, for example, when fast data transfer is a priority or when load balancing is not a critical requirement.},
author = {{\v{S}}imon, Marek and Huraj, Ladislav and B{\'{u}}{\v{c}}ik, Nicolas},
doi = {10.3390/fi15080253},
file = {:Users/aariaz/Downloads/futureinternet-15-00253.pdf:pdf},
issn = {19995903},
journal = {Future Internet},
keywords = {Docker,Docker Swarm,Kubernetes,Linux,Proxmox,containers,high availability},
mendeley-groups = {SMS/SNOWBALL/Forward-1,SMS/SNOWBALL/aux-for,FASE 3},
number = {8},
title = {{A Comparative Analysis of High Availability for Linux Container Infrastructures}},
volume = {15},
year = {2023}
}
@article{Chingo2021,
author = {Chingo, Roger and Gómez, Omar S.},
year = {2021},
month = {04},
pages = {1},
title = {Tecnología de contenedores y su aplicación en el aprendizaje de ciberseguridad: Una revisión sistemática de literatura},
volume = {9},
journal = {RECIBE REVISTA ELECTRÓNICA DE COMPUTACIÓN INFORMÁTICA BIOMÉDICA Y ELECTRÓNICA},
doi = {10.32870/recibe.v9i2.186}
}
@article{DOGANI2023120,
title = {Auto-scaling techniques in container-based cloud and edge/fog computing: Taxonomy and survey},
journal = {Computer Communications},
volume = {209},
pages = {120-150},
year = {2023},
issn = {0140-3664},
doi = {https://doi.org/10.1016/j.comcom.2023.06.010},
url = {https://www.sciencedirect.com/science/article/pii/S0140366423002086},
author = {Javad Dogani and Reza Namvar and Farshad Khunjush},
keywords = {Cloud computing, Fog computing, Edge computing, Auto-scaling, Container-based virtualization},
abstract = {The long-held dream of computing as a service was realized with the emergence of cloud computing. Recently, fog and edge computing have been introduced as extensions of cloud networks, providing networking, processing, data management, and storage on network nodes near Internet of Things (IoT) devices to bridge the gap between the cloud and IoT devices. As the foundation of distributed computing, virtualization enables more effective use of physical computer hardware. Operating system virtualization through containers has recently been proposed as a promising alternative to virtual machines (VMs). Containers are lightweight packages that contain all application dependencies, system libraries, and third-party software packages. This research aims to review auto-scaling solutions for container-based virtualization in cloud and edge/fog computing applications. Auto-scaling plays a crucial role in the broad adoption of cloud computing by allocating and releasing computing resources in response to fluctuating resource requirements. However, designing and implementing an efficient auto-scaler for container-based applications in cloud and edge/fog computing presents challenges due to diverse application resource requirements and dynamic workload characteristics. Our research presents a comprehensive classification system for articles, covering key parameters such as auto-scaling techniques, experiments, workloads, and metrics, among others. We provide a detailed analysis of the results, offering valuable insights into open challenges and identifying promising directions for future research in this field.}
}
@misc{AmazonWebServicesInc2023,
abstract = {Informaci{\'{o}}n sobre lo que es la virtualizaci{\'{o}}n, c{\'{o}}mo y por qu{\'{e}} las empresas la utilizan y c{\'{o}}mo usar los servicios de computaci{\'{o}}n con AWS.},
author = {{Amazon Web Services Inc.}},
booktitle = {Aws.Amazon.Com},
mendeley-groups = {TG-aux},
title = {{¿Qu{\'{e}} es la virtualizaci{\'{o}}n? - Explicaci{\'{o}}n de la virtualizaci{\'{o}}n de la computaci{\'{o}}n en la nube - AWS}},
url = {https://aws.amazon.com/es/what-is/virtualization/},
urldate = {2025-09-22},
year = {2023}
}
@incollection{KLEIDERMACHER201225,
title = {Chapter 2 - Systems Software Considerations},
editor = {David Kleidermacher and Mike Kleidermacher},
booktitle = {Embedded Systems Security},
publisher = {Newnes},
address = {Oxford},
pages = {25-91},
year = {2012},
isbn = {978-0-12-386886-2},
doi = {https://doi.org/10.1016/B978-0-12-386886-2.00002-3},
url = {https://www.sciencedirect.com/science/article/pii/B9780123868862000023},
author = {David Kleidermacher and Mike Kleidermacher}
}
@article{bauman2015survey,
  title={A survey on hypervisor-based monitoring: approaches, applications, and evolutions},
  author={Bauman, Erick and Ayoade, Gbadebo and Lin, Zhiqiang},
  journal={ACM Computing Surveys (CSUR)},
  volume={48},
  number={1},
  pages={1--33},
  year={2015},
  publisher={ACM New York, NY, USA}
}
@article{eder2016hypervisor,
  title={Hypervisor-vs. container-based virtualization},
  author={Eder, Michael},
  journal={Future Internet (FI) and Innovative Internet Technologies and Mobile Communications (IITM)},
  volume={1},
  year={2016},
  publisher={Chair of Network Architectures and Services, TUM School of Computation~…}
}
@article{jain2020linux,
  title={Linux Containers and Virtualization},
  author={Jain, Shashank Mohan},
  journal={A Kernel Perspective},
  pages={2020--10},
  year={2020},
  publisher={Springer}
}
@INPROCEEDINGS{6903537,
  author={Dua, Rajdeep and Raja, A Reddy and Kakadia, Dharmesh},
  booktitle={2014 IEEE International Conference on Cloud Engineering}, 
  title={Virtualization vs Containerization to Support PaaS}, 
  year={2014},
  volume={},
  number={},
  pages={610-614},
  keywords={Containers;Linux;Kernel;Virtual machining;Security;Resource management;File systems;container;virtualization;paas},
  doi={10.1109/IC2E.2014.41}
}
@inproceedings{straesser2023empirical,
  title={An empirical study of container image configurations and their impact on start times},
  author={Straesser, Martin and Bauer, Andr{\'e} and Leppich, Robert and Herbst, Nikolas and Chard, Kyle and Foster, Ian and Kounev, Samuel},
  booktitle={2023 IEEE/ACM 23rd International Symposium on Cluster, Cloud and Internet Computing (CCGrid)},
  pages={94--105},
  year={2023},
  organization={IEEE}
}
@inproceedings{dahlmanns2023secrets,
  title={Secrets revealed in container images: an internet-wide study on occurrence and impact},
  author={Dahlmanns, Markus and Sander, Constantin and Decker, Robin and Wehrle, Klaus},
  booktitle={Proceedings of the 2023 ACM Asia Conference on Computer and Communications Security},
  pages={797--811},
  year={2023}
}
@inproceedings{anwar2018improving,
  title={Improving docker registry design based on production workload analysis},
  author={Anwar, Ali and Mohamed, Mohamed and Tarasov, Vasily and Littley, Michael and Rupprecht, Lukas and Cheng, Yue and Zhao, Nannan and Skourtis, Dimitrios and Warke, Amit S and Ludwig, Heiko and others},
  booktitle={16th USENIX Conference on File and Storage Technologies (FAST 18)},
  pages={265--278},
  year={2018}
}
@inproceedings{al2019container,
  title={Container orchestration engines: A thorough functional and performance comparison},
  author={Al Jawarneh, Isam Mashhour and Bellavista, Paolo and Bosi, Filippo and Foschini, Luca and Martuscelli, Giuseppe and Montanari, Rebecca and Palopoli, Amedeo},
  booktitle={ICC 2019-2019 IEEE International Conference on Communications (ICC)},
  pages={1--6},
  year={2019},
  organization={IEEE}
}
@article{zhou2021container,
  title={Container orchestration on HPC systems through Kubernetes},
  author={Zhou, Naweiluo and Georgiou, Yiannis and Pospieszny, Marcin and Zhong, Li and Zhou, Huan and Niethammer, Christoph and Pejak, Branislav and Marko, Oskar and Hoppe, Dennis},
  journal={Journal of Cloud Computing},
  volume={10},
  number={1},
  pages={16},
  year={2021},
  publisher={Springer}
}
@article{carrion2022kubernetes,
  title={Kubernetes scheduling: Taxonomy, ongoing issues and challenges},
  author={Carri{\'o}n, Carmen},
  journal={ACM Computing Surveys},
  volume={55},
  number={7},
  pages={1--37},
  year={2022},
  publisher={ACM New York, NY}
}
@misc{girma2018evaluation,
  title={Evaluation of container virtualization systems supporting Open Container Initiative images},
  author={Girma, Robi},
  year={2018}
}
@Inbook{Buchanan2020,
author="Buchanan, Steve
and Rangama, Janaka
and Bellavance, Ned",
title="Inside Docker Containers",
bookTitle="Introducing Azure Kubernetes Service : A Practical Guide to Container Orchestration",
year="2020",
publisher="Apress",
address="Berkeley, CA",
pages="1--16",
abstract="Welcome to Introducing Azure Kubernetes Service: A Practical Guide to Container Orchestration. Before diving into Azure Kubernetes Service, it is important to understand the building blocks and road leading up to Kubernetes and finally Azure Kubernetes Service.",
isbn="978-1-4842-5519-3",
doi="10.1007/978-1-4842-5519-3_1",
url="https://doi.org/10.1007/978-1-4842-5519-3_1"
}
@inproceedings{protogeros2024cargosync,
  title={CargoSync: Efficient Containerd Image Updates in Low-Bandwidth Edge Environments with Rsync-based Delta Compression},
  author={Protogeros, Ioannis and Karamousadakis, Michalis and Rizakis, Michail and Porichis, Antonios},
  booktitle={2024 IEEE International Conference on Edge Computing and Communications (EDGE)},
  pages={22--28},
  year={2024},
  organization={IEEE}
}
@article{gannon2017cloud,
  title={Cloud-native applications},
  author={Gannon, Dennis and Barga, Roger and Sundaresan, Neel},
  journal={IEEE Cloud Computing},
  volume={4},
  number={5},
  pages={16--21},
  year={2017},
  publisher={IEEE}
}
@article{oyeniran2024comprehensive,
  title={A comprehensive review of leveraging cloud-native technologies for scalability and resilience in software development},
  author={Oyeniran, Oyekunle Claudius and Modupe, Oluwole Temidayo and Otitoola, Aanuoluwapo Ayodeji and Abiona, Oluwatosin Oluwatimileyin and Adewusi, Adebunmi Okechukwu and Oladapo, Oluwatayo Jacob and others},
  journal={International Journal of Science and Research Archive},
  volume={11},
  number={2},
  pages={330--337},
  year={2024}
}
@inproceedings{kormanik2023exploring,
  title={Exploring GitOps: An Approach to Cloud Cluster System Deployment},
  author={Korman{\'\i}k, Tom{\'a}{\v{s}} and Porub{\"a}n, Jaroslav},
  booktitle={2023 21st International Conference on Emerging eLearning Technologies and Applications (ICETA)},
  pages={318--323},
  year={2023},
  organization={IEEE}
}